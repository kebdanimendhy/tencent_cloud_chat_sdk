// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/im_api_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeImsdkBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeImsdkBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeImsdkBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int DartInitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _DartInitDartApiDL(
      data,
    );
  }

  late final _DartInitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'DartInitDartApiDL');
  late final _DartInitDartApiDL =
      _DartInitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void DartRegisterSendPort(
    int send_port,
  ) {
    return _DartRegisterSendPort(
      send_port,
    );
  }

  late final _DartRegisterSendPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Port)>>(
          'DartRegisterSendPort');
  late final _DartRegisterSendPort =
      _DartRegisterSendPortPtr.asFunction<void Function(int)>();

  /// IMSDK
  /// TIMManager
  /// 全局回调
  void DartSetNetworkStatusListenerCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetNetworkStatusListenerCallback(
      user_data,
    );
  }

  late final _DartSetNetworkStatusListenerCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetNetworkStatusListenerCallback');
  late final _DartSetNetworkStatusListenerCallback =
      _DartSetNetworkStatusListenerCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetKickedOfflineCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetKickedOfflineCallback(
      user_data,
    );
  }

  late final _DartSetKickedOfflineCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetKickedOfflineCallback');
  late final _DartSetKickedOfflineCallback = _DartSetKickedOfflineCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetUserSigExpiredCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetUserSigExpiredCallback(
      user_data,
    );
  }

  late final _DartSetUserSigExpiredCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetUserSigExpiredCallback');
  late final _DartSetUserSigExpiredCallback = _DartSetUserSigExpiredCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSelfInfoUpdatedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSelfInfoUpdatedCallback(
      user_data,
    );
  }

  late final _DartSetSelfInfoUpdatedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSelfInfoUpdatedCallback');
  late final _DartSetSelfInfoUpdatedCallback =
      _DartSetSelfInfoUpdatedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetUserStatusChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetUserStatusChangedCallback(
      user_data,
    );
  }

  late final _DartSetUserStatusChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetUserStatusChangedCallback');
  late final _DartSetUserStatusChangedCallback =
      _DartSetUserStatusChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetUserInfoChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetUserInfoChangedCallback(
      user_data,
    );
  }

  late final _DartSetUserInfoChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetUserInfoChangedCallback');
  late final _DartSetUserInfoChangedCallback =
      _DartSetUserInfoChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetLogCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetLogCallback(
      user_data,
    );
  }

  late final _DartSetLogCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetLogCallback');
  late final _DartSetLogCallback =
      _DartSetLogCallbackPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// 初始化
  int DartInitSDK(
    int sdk_app_id,
    ffi.Pointer<ffi.Char> json_sdk_config,
  ) {
    return _DartInitSDK(
      sdk_app_id,
      json_sdk_config,
    );
  }

  late final _DartInitSDKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64, ffi.Pointer<ffi.Char>)>>('DartInitSDK');
  late final _DartInitSDK =
      _DartInitSDKPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int DartUnitSDK() {
    return _DartUnitSDK();
  }

  late final _DartUnitSDKPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('DartUnitSDK');
  late final _DartUnitSDK = _DartUnitSDKPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> DartGetSDKVersion() {
    return _DartGetSDKVersion();
  }

  late final _DartGetSDKVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'DartGetSDKVersion');
  late final _DartGetSDKVersion =
      _DartGetSDKVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int DartGetServerTime() {
    return _DartGetServerTime();
  }

  late final _DartGetServerTimePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('DartGetServerTime');
  late final _DartGetServerTime =
      _DartGetServerTimePtr.asFunction<int Function()>();

  int DartSetConfig(
    ffi.Pointer<ffi.Char> json_config,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConfig(
      json_config,
      user_data,
    );
  }

  late final _DartSetConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('DartSetConfig');
  late final _DartSetConfig = _DartSetConfigPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// 登录、登出
  int DartLogin(
    ffi.Pointer<ffi.Char> user_id,
    ffi.Pointer<ffi.Char> user_sig,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartLogin(
      user_id,
      user_sig,
      user_data,
    );
  }

  late final _DartLoginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartLogin');
  late final _DartLogin = _DartLoginPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartLogout(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartLogout(
      user_data,
    );
  }

  late final _DartLogoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartLogout');
  late final _DartLogout =
      _DartLogoutPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> DartGetLoginUserID() {
    return _DartGetLoginUserID();
  }

  late final _DartGetLoginUserIDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'DartGetLoginUserID');
  late final _DartGetLoginUserID =
      _DartGetLoginUserIDPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int DartGetLoginStatus() {
    return _DartGetLoginStatus();
  }

  late final _DartGetLoginStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('DartGetLoginStatus');
  late final _DartGetLoginStatus =
      _DartGetLoginStatusPtr.asFunction<int Function()>();

  /// 用户资料
  int DartGetUsersInfo(
    ffi.Pointer<ffi.Char> json_get_user_profile_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetUsersInfo(
      json_get_user_profile_list_param,
      user_data,
    );
  }

  late final _DartGetUsersInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetUsersInfo');
  late final _DartGetUsersInfo = _DartGetUsersInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetSelfInfo(
    ffi.Pointer<ffi.Char> json_modify_self_user_profile_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSelfInfo(
      json_modify_self_user_profile_param,
      user_data,
    );
  }

  late final _DartSetSelfInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetSelfInfo');
  late final _DartSetSelfInfo = _DartSetSelfInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSubscribeUserInfo(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSubscribeUserInfo(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartSubscribeUserInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSubscribeUserInfo');
  late final _DartSubscribeUserInfo = _DartSubscribeUserInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartUnsubscribeUserInfo(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartUnsubscribeUserInfo(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartUnsubscribeUserInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartUnsubscribeUserInfo');
  late final _DartUnsubscribeUserInfo = _DartUnsubscribeUserInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetUserStatus(
    ffi.Pointer<ffi.Char> json_identifier_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetUserStatus(
      json_identifier_array,
      user_data,
    );
  }

  late final _DartGetUserStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetUserStatus');
  late final _DartGetUserStatus = _DartGetUserStatusPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetSelfStatus(
    ffi.Pointer<ffi.Char> json_identifier_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSelfStatus(
      json_identifier_array,
      user_data,
    );
  }

  late final _DartSetSelfStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetSelfStatus');
  late final _DartSetSelfStatus = _DartSetSelfStatusPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSubscribeUserStatus(
    ffi.Pointer<ffi.Char> json_identifier_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSubscribeUserStatus(
      json_identifier_array,
      user_data,
    );
  }

  late final _DartSubscribeUserStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSubscribeUserStatus');
  late final _DartSubscribeUserStatus = _DartSubscribeUserStatusPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartUnsubscribeUserStatus(
    ffi.Pointer<ffi.Char> json_identifier_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartUnsubscribeUserStatus(
      json_identifier_array,
      user_data,
    );
  }

  late final _DartUnsubscribeUserStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartUnsubscribeUserStatus');
  late final _DartUnsubscribeUserStatus = _DartUnsubscribeUserStatusPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// TIMMessageManager 消息
  /// 消息全局回调
  void DartAddReceiveNewMsgCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddReceiveNewMsgCallback(
      user_data,
    );
  }

  late final _DartAddReceiveNewMsgCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartAddReceiveNewMsgCallback');
  late final _DartAddReceiveNewMsgCallback = _DartAddReceiveNewMsgCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartRemoveReceiveNewMsgCallback() {
    return _DartRemoveReceiveNewMsgCallback();
  }

  late final _DartRemoveReceiveNewMsgCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'DartRemoveReceiveNewMsgCallback');
  late final _DartRemoveReceiveNewMsgCallback =
      _DartRemoveReceiveNewMsgCallbackPtr.asFunction<void Function()>();

  void DartSetMsgElemUploadProgressCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgElemUploadProgressCallback(
      user_data,
    );
  }

  late final _DartSetMsgElemUploadProgressCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgElemUploadProgressCallback');
  late final _DartSetMsgElemUploadProgressCallback =
      _DartSetMsgElemUploadProgressCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgReadReceiptCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgReadReceiptCallback(
      user_data,
    );
  }

  late final _DartSetMsgReadReceiptCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgReadReceiptCallback');
  late final _DartSetMsgReadReceiptCallback = _DartSetMsgReadReceiptCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgRevokeCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgRevokeCallback(
      user_data,
    );
  }

  late final _DartSetMsgRevokeCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgRevokeCallback');
  late final _DartSetMsgRevokeCallback = _DartSetMsgRevokeCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgUpdateCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgUpdateCallback(
      user_data,
    );
  }

  late final _DartSetMsgUpdateCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgUpdateCallback');
  late final _DartSetMsgUpdateCallback = _DartSetMsgUpdateCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgExtensionsChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgExtensionsChangedCallback(
      user_data,
    );
  }

  late final _DartSetMsgExtensionsChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgExtensionsChangedCallback');
  late final _DartSetMsgExtensionsChangedCallback =
      _DartSetMsgExtensionsChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgExtensionsDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgExtensionsDeletedCallback(
      user_data,
    );
  }

  late final _DartSetMsgExtensionsDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgExtensionsDeletedCallback');
  late final _DartSetMsgExtensionsDeletedCallback =
      _DartSetMsgExtensionsDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgReactionsChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgReactionsChangedCallback(
      user_data,
    );
  }

  late final _DartSetMsgReactionsChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgReactionsChangedCallback');
  late final _DartSetMsgReactionsChangedCallback =
      _DartSetMsgReactionsChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgAllMessageReceiveOptionCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgAllMessageReceiveOptionCallback(
      user_data,
    );
  }

  late final _DartSetMsgAllMessageReceiveOptionCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgAllMessageReceiveOptionCallback');
  late final _DartSetMsgAllMessageReceiveOptionCallback =
      _DartSetMsgAllMessageReceiveOptionCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMsgGroupPinnedMessageChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMsgGroupPinnedMessageChangedCallback(
      user_data,
    );
  }

  late final _DartSetMsgGroupPinnedMessageChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMsgGroupPinnedMessageChangedCallback');
  late final _DartSetMsgGroupPinnedMessageChangedCallback =
      _DartSetMsgGroupPinnedMessageChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 消息收发
  int DartSendMessage(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSendMessage(
      conv_id,
      conv_type.value,
      json_msg_param,
      user_data,
    );
  }

  late final _DartSendMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSendMessage');
  late final _DartSendMessage = _DartSendMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartDownloadElemToPath(
    ffi.Pointer<ffi.Char> json_download_elem_param,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDownloadElemToPath(
      json_download_elem_param,
      path,
      user_data,
    );
  }

  late final _DartDownloadElemToPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDownloadElemToPath');
  late final _DartDownloadElemToPath = _DartDownloadElemToPathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartDownloadMergerMessage(
    ffi.Pointer<ffi.Char> json_single_msg,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDownloadMergerMessage(
      json_single_msg,
      user_data,
    );
  }

  late final _DartDownloadMergerMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDownloadMergerMessage');
  late final _DartDownloadMergerMessage = _DartDownloadMergerMessagePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetLocalCustomData(
    ffi.Pointer<ffi.Char> json_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetLocalCustomData(
      json_msg_param,
      user_data,
    );
  }

  late final _DartSetLocalCustomDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetLocalCustomData');
  late final _DartSetLocalCustomData = _DartSetLocalCustomDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetHistoryMessageList(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_get_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetHistoryMessageList(
      conv_id,
      conv_type.value,
      json_get_msg_param,
      user_data,
    );
  }

  late final _DartGetHistoryMessageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetHistoryMessageList');
  late final _DartGetHistoryMessageList =
      _DartGetHistoryMessageListPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  /// 消息接收选项
  int DartSetC2CReceiveMessageOpt(
    ffi.Pointer<ffi.Char> json_identifier_array,
    TIMReceiveMessageOpt opt,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetC2CReceiveMessageOpt(
      json_identifier_array,
      opt.value,
      user_data,
    );
  }

  late final _DartSetC2CReceiveMessageOptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('DartSetC2CReceiveMessageOpt');
  late final _DartSetC2CReceiveMessageOpt =
      _DartSetC2CReceiveMessageOptPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartGetC2CReceiveMessageOpt(
    ffi.Pointer<ffi.Char> json_identifier_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetC2CReceiveMessageOpt(
      json_identifier_array,
      user_data,
    );
  }

  late final _DartGetC2CReceiveMessageOptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetC2CReceiveMessageOpt');
  late final _DartGetC2CReceiveMessageOpt = _DartGetC2CReceiveMessageOptPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetGroupReceiveMessageOpt(
    ffi.Pointer<ffi.Char> group_id,
    TIMReceiveMessageOpt opt,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupReceiveMessageOpt(
      group_id,
      opt.value,
      user_data,
    );
  }

  late final _DartSetGroupReceiveMessageOptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('DartSetGroupReceiveMessageOpt');
  late final _DartSetGroupReceiveMessageOpt =
      _DartSetGroupReceiveMessageOptPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartSetAllReceiveMessageOpt(
    TIMReceiveMessageOpt opt,
    int start_hour,
    int start_minute,
    int start_second,
    int duration,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetAllReceiveMessageOpt(
      opt.value,
      start_hour,
      start_minute,
      start_second,
      duration,
      user_data,
    );
  }

  late final _DartSetAllReceiveMessageOptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartSetAllReceiveMessageOpt');
  late final _DartSetAllReceiveMessageOpt =
      _DartSetAllReceiveMessageOptPtr.asFunction<
          int Function(int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int DartSetAllReceiveMessageOpt2(
    TIMReceiveMessageOpt opt,
    int start_time_stamp,
    int duration,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetAllReceiveMessageOpt2(
      opt.value,
      start_time_stamp,
      duration,
      user_data,
    );
  }

  late final _DartSetAllReceiveMessageOpt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartSetAllReceiveMessageOpt2');
  late final _DartSetAllReceiveMessageOpt2 = _DartSetAllReceiveMessageOpt2Ptr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int DartGetAllReceiveMessageOpt(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetAllReceiveMessageOpt(
      user_data,
    );
  }

  late final _DartGetAllReceiveMessageOptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetAllReceiveMessageOpt');
  late final _DartGetAllReceiveMessageOpt = _DartGetAllReceiveMessageOptPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// 消息拉取、撤回、删除、标记已读等
  int DartGetMessageList(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_get_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMessageList(
      conv_id,
      conv_type.value,
      json_get_msg_param,
      user_data,
    );
  }

  late final _DartGetMessageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMessageList');
  late final _DartGetMessageList = _DartGetMessageListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartRevokeMessage(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartRevokeMessage(
      conv_id,
      conv_type.value,
      json_msg_param,
      user_data,
    );
  }

  late final _DartRevokeMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartRevokeMessage');
  late final _DartRevokeMessage = _DartRevokeMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartModifyMessage(
    ffi.Pointer<ffi.Char> json_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyMessage(
      json_msg_param,
      user_data,
    );
  }

  late final _DartModifyMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartModifyMessage');
  late final _DartModifyMessage = _DartModifyMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteMessageFromLocalStorage(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_msgdel_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteMessageFromLocalStorage(
      conv_id,
      conv_type.value,
      json_msgdel_param,
      user_data,
    );
  }

  late final _DartDeleteMessageFromLocalStoragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteMessageFromLocalStorage');
  late final _DartDeleteMessageFromLocalStorage =
      _DartDeleteMessageFromLocalStoragePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartDeleteMessages(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_msg_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteMessages(
      conv_id,
      conv_type.value,
      json_msg_array,
      user_data,
    );
  }

  late final _DartDeleteMessagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteMessages');
  late final _DartDeleteMessages = _DartDeleteMessagesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartClearHistoryMessage(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartClearHistoryMessage(
      conv_id,
      conv_type.value,
      user_data,
    );
  }

  late final _DartClearHistoryMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('DartClearHistoryMessage');
  late final _DartClearHistoryMessage = _DartClearHistoryMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartSaveMessage(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_msg_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSaveMessage(
      conv_id,
      conv_type.value,
      json_msg_param,
      user_data,
    );
  }

  late final _DartSaveMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSaveMessage');
  late final _DartSaveMessage = _DartSaveMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartFindMessages(
    ffi.Pointer<ffi.Char> json_message_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartFindMessages(
      json_message_id_array,
      user_data,
    );
  }

  late final _DartFindMessagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartFindMessages');
  late final _DartFindMessages = _DartFindMessagesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSearchLocalMessages(
    ffi.Pointer<ffi.Char> json_search_message_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSearchLocalMessages(
      json_search_message_param,
      user_data,
    );
  }

  late final _DartSearchLocalMessagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSearchLocalMessages');
  late final _DartSearchLocalMessages = _DartSearchLocalMessagesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSearchCloudMessages(
    ffi.Pointer<ffi.Char> json_search_message_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSearchCloudMessages(
      json_search_message_param,
      user_data,
    );
  }

  late final _DartSearchCloudMessagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSearchCloudMessages');
  late final _DartSearchCloudMessages = _DartSearchCloudMessagesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSendMessageReadReceipts(
    ffi.Pointer<ffi.Char> json_msg_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSendMessageReadReceipts(
      json_msg_array,
      user_data,
    );
  }

  late final _DartSendMessageReadReceiptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSendMessageReadReceipts');
  late final _DartSendMessageReadReceipts = _DartSendMessageReadReceiptsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetMessageReadReceipts(
    ffi.Pointer<ffi.Char> json_msg_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMessageReadReceipts(
      json_msg_array,
      user_data,
    );
  }

  late final _DartGetMessageReadReceiptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMessageReadReceipts');
  late final _DartGetMessageReadReceipts = _DartGetMessageReadReceiptsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetGroupMessageReadMemberList(
    ffi.Pointer<ffi.Char> json_msg,
    TIMGroupMessageReadMembersFilter filter,
    int next_seq,
    int count,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupMessageReadMemberList(
      json_msg,
      filter.value,
      next_seq,
      count,
      user_data,
    );
  }

  late final _DartGetGroupMessageReadMemberListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupMessageReadMemberList');
  late final _DartGetGroupMessageReadMemberList =
      _DartGetGroupMessageReadMemberListPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Void>)>();

  int DartSetMessageExtensions(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Char> json_extension_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMessageExtensions(
      json_msg,
      json_extension_array,
      user_data,
    );
  }

  late final _DartSetMessageExtensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetMessageExtensions');
  late final _DartSetMessageExtensions =
      _DartSetMessageExtensionsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartGetMessageExtensions(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMessageExtensions(
      json_msg,
      user_data,
    );
  }

  late final _DartGetMessageExtensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMessageExtensions');
  late final _DartGetMessageExtensions = _DartGetMessageExtensionsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteMessageExtensions(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Char> json_extension_key_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteMessageExtensions(
      json_msg,
      json_extension_key_array,
      user_data,
    );
  }

  late final _DartDeleteMessageExtensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteMessageExtensions');
  late final _DartDeleteMessageExtensions =
      _DartDeleteMessageExtensionsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartAddMessageReaction(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Char> reaction_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddMessageReaction(
      json_msg,
      reaction_id,
      user_data,
    );
  }

  late final _DartAddMessageReactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartAddMessageReaction');
  late final _DartAddMessageReaction = _DartAddMessageReactionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartRemoveMessageReaction(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Char> reaction_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartRemoveMessageReaction(
      json_msg,
      reaction_id,
      user_data,
    );
  }

  late final _DartRemoveMessageReactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartRemoveMessageReaction');
  late final _DartRemoveMessageReaction =
      _DartRemoveMessageReactionPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartGetMessageReactions(
    ffi.Pointer<ffi.Char> json_msg_array,
    int max_user_count_per_reaction,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMessageReactions(
      json_msg_array,
      max_user_count_per_reaction,
      user_data,
    );
  }

  late final _DartGetMessageReactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartGetMessageReactions');
  late final _DartGetMessageReactions = _DartGetMessageReactionsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartGetAllUserListOfMessageReaction(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Char> reaction_id,
    int next_seq,
    int count,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetAllUserListOfMessageReaction(
      json_msg,
      reaction_id,
      next_seq,
      count,
      user_data,
    );
  }

  late final _DartGetAllUserListOfMessageReactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartGetAllUserListOfMessageReaction');
  late final _DartGetAllUserListOfMessageReaction =
      _DartGetAllUserListOfMessageReactionPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Void>)>();

  int DartTranslateText(
    ffi.Pointer<ffi.Char> json_source_text_array,
    ffi.Pointer<ffi.Char> source_language,
    ffi.Pointer<ffi.Char> target_language,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartTranslateText(
      json_source_text_array,
      source_language,
      target_language,
      user_data,
    );
  }

  late final _DartTranslateTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartTranslateText');
  late final _DartTranslateText = _DartTranslateTextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartConvertVoiceToText(
    ffi.Pointer<ffi.Char> url,
    ffi.Pointer<ffi.Char> language,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartConvertVoiceToText(
      url,
      language,
      user_data,
    );
  }

  late final _DartConvertVoiceToTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartConvertVoiceToText');
  late final _DartConvertVoiceToText = _DartConvertVoiceToTextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartPinGroupMessage(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_msg,
    bool is_pinned,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartPinGroupMessage(
      group_id,
      json_msg,
      is_pinned,
      user_data,
    );
  }

  late final _DartPinGroupMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool, ffi.Pointer<ffi.Void>)>>('DartPinGroupMessage');
  late final _DartPinGroupMessage = _DartPinGroupMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool,
          ffi.Pointer<ffi.Void>)>();

  int DartGetPinnedGroupMessageList(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetPinnedGroupMessageList(
      group_id,
      user_data,
    );
  }

  late final _DartGetPinnedGroupMessageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetPinnedGroupMessageList');
  late final _DartGetPinnedGroupMessageList = _DartGetPinnedGroupMessageListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartMarkMessageAsRead(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartMarkMessageAsRead(
      conv_id,
      conv_type.value,
      user_data,
    );
  }

  late final _DartMarkMessageAsReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('DartMarkMessageAsRead');
  late final _DartMarkMessageAsRead = _DartMarkMessageAsReadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartMarkAllMessageAsRead(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartMarkAllMessageAsRead(
      user_data,
    );
  }

  late final _DartMarkAllMessageAsReadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartMarkAllMessageAsRead');
  late final _DartMarkAllMessageAsRead = _DartMarkAllMessageAsReadPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// TIMGroupManager 群组
  /// 群组全局回调
  void DartSetGroupTipsEventCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupTipsEventCallback(
      user_data,
    );
  }

  late final _DartSetGroupTipsEventCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetGroupTipsEventCallback');
  late final _DartSetGroupTipsEventCallback = _DartSetGroupTipsEventCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetGroupAttributeChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupAttributeChangedCallback(
      user_data,
    );
  }

  late final _DartSetGroupAttributeChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetGroupAttributeChangedCallback');
  late final _DartSetGroupAttributeChangedCallback =
      _DartSetGroupAttributeChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetGroupCounterChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupCounterChangedCallback(
      user_data,
    );
  }

  late final _DartSetGroupCounterChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetGroupCounterChangedCallback');
  late final _DartSetGroupCounterChangedCallback =
      _DartSetGroupCounterChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 群组基本操作
  int DartCreateGroup(
    ffi.Pointer<ffi.Char> json_group_create_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreateGroup(
      json_group_create_param,
      user_data,
    );
  }

  late final _DartCreateGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreateGroup');
  late final _DartCreateGroup = _DartCreateGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteGroup(
      group_id,
      user_data,
    );
  }

  late final _DartDeleteGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteGroup');
  late final _DartDeleteGroup = _DartDeleteGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartJoinGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> hello_msg,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartJoinGroup(
      group_id,
      hello_msg,
      user_data,
    );
  }

  late final _DartJoinGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartJoinGroup');
  late final _DartJoinGroup = _DartJoinGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartQuitGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartQuitGroup(
      group_id,
      user_data,
    );
  }

  late final _DartQuitGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('DartQuitGroup');
  late final _DartQuitGroup = _DartQuitGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetJoinedGroupList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetJoinedGroupList(
      user_data,
    );
  }

  late final _DartGetJoinedGroupListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetJoinedGroupList');
  late final _DartGetJoinedGroupList = _DartGetJoinedGroupListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  /// 群资料
  int DartGetGroupsInfo(
    ffi.Pointer<ffi.Char> json_group_getinfo_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupsInfo(
      json_group_getinfo_param,
      user_data,
    );
  }

  late final _DartGetGroupsInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupsInfo');
  late final _DartGetGroupsInfo = _DartGetGroupsInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSearchGroups(
    ffi.Pointer<ffi.Char> json_group_search_groups_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSearchGroups(
      json_group_search_groups_param,
      user_data,
    );
  }

  late final _DartSearchGroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSearchGroups');
  late final _DartSearchGroups = _DartSearchGroupsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetGroupInfo(
    ffi.Pointer<ffi.Char> json_group_modify_info_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupInfo(
      json_group_modify_info_param,
      user_data,
    );
  }

  late final _DartSetGroupInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetGroupInfo');
  late final _DartSetGroupInfo = _DartSetGroupInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartInitGroupAttributes(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_group_attributes,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartInitGroupAttributes(
      group_id,
      json_group_attributes,
      user_data,
    );
  }

  late final _DartInitGroupAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartInitGroupAttributes');
  late final _DartInitGroupAttributes = _DartInitGroupAttributesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartSetGroupAttributes(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_group_attributes,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupAttributes(
      group_id,
      json_group_attributes,
      user_data,
    );
  }

  late final _DartSetGroupAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetGroupAttributes');
  late final _DartSetGroupAttributes = _DartSetGroupAttributesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartDeleteGroupAttributes(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_keys,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteGroupAttributes(
      group_id,
      json_keys,
      user_data,
    );
  }

  late final _DartDeleteGroupAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteGroupAttributes');
  late final _DartDeleteGroupAttributes =
      _DartDeleteGroupAttributesPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartGetGroupAttributes(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_keys,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupAttributes(
      group_id,
      json_keys,
      user_data,
    );
  }

  late final _DartGetGroupAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupAttributes');
  late final _DartGetGroupAttributes = _DartGetGroupAttributesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartGetOnlineMemberCount(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetOnlineMemberCount(
      group_id,
      user_data,
    );
  }

  late final _DartGetOnlineMemberCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetOnlineMemberCount');
  late final _DartGetOnlineMemberCount = _DartGetOnlineMemberCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetGroupCounters(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_group_counter_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetGroupCounters(
      group_id,
      json_group_counter_array,
      user_data,
    );
  }

  late final _DartSetGroupCountersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetGroupCounters');
  late final _DartSetGroupCounters = _DartSetGroupCountersPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartGetGroupCounters(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_group_counter_key_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupCounters(
      group_id,
      json_group_counter_key_array,
      user_data,
    );
  }

  late final _DartGetGroupCountersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupCounters');
  late final _DartGetGroupCounters = _DartGetGroupCountersPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartIncreaseGroupCounter(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> group_counter_key,
    int group_counter_value,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartIncreaseGroupCounter(
      group_id,
      group_counter_key,
      group_counter_value,
      user_data,
    );
  }

  late final _DartIncreaseGroupCounterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int64, ffi.Pointer<ffi.Void>)>>('DartIncreaseGroupCounter');
  late final _DartIncreaseGroupCounter =
      _DartIncreaseGroupCounterPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Void>)>();

  int DartDecreaseGroupCounter(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> group_counter_key,
    int group_counter_value,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDecreaseGroupCounter(
      group_id,
      group_counter_key,
      group_counter_value,
      user_data,
    );
  }

  late final _DartDecreaseGroupCounterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int64, ffi.Pointer<ffi.Void>)>>('DartDecreaseGroupCounter');
  late final _DartDecreaseGroupCounter =
      _DartDecreaseGroupCounterPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Void>)>();

  /// 群成员
  int DartGetGroupMemberList(
    ffi.Pointer<ffi.Char> json_group_get_member_infos_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupMemberList(
      json_group_get_member_infos_param,
      user_data,
    );
  }

  late final _DartGetGroupMemberListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupMemberList');
  late final _DartGetGroupMemberList = _DartGetGroupMemberListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSearchGroupMembers(
    ffi.Pointer<ffi.Char> json_group_search_group_members_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSearchGroupMembers(
      json_group_search_group_members_param,
      user_data,
    );
  }

  late final _DartSearchGroupMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSearchGroupMembers');
  late final _DartSearchGroupMembers = _DartSearchGroupMembersPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartModifyGroupMemberInfo(
    ffi.Pointer<ffi.Char> json_group_modify_meminfo_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyGroupMemberInfo(
      json_group_modify_meminfo_param,
      user_data,
    );
  }

  late final _DartModifyGroupMemberInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartModifyGroupMemberInfo');
  late final _DartModifyGroupMemberInfo = _DartModifyGroupMemberInfoPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartInviteUserToGroup(
    ffi.Pointer<ffi.Char> json_group_invite_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartInviteUserToGroup(
      json_group_invite_param,
      user_data,
    );
  }

  late final _DartInviteUserToGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartInviteUserToGroup');
  late final _DartInviteUserToGroup = _DartInviteUserToGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartKickGroupMember(
    ffi.Pointer<ffi.Char> json_group_delete_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartKickGroupMember(
      json_group_delete_param,
      user_data,
    );
  }

  late final _DartKickGroupMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartKickGroupMember');
  late final _DartKickGroupMember = _DartKickGroupMemberPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartMarkGroupMemberList(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> member_array,
    int mark_type,
    bool enable_mark,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartMarkGroupMemberList(
      group_id,
      member_array,
      mark_type,
      enable_mark,
      user_data,
    );
  }

  late final _DartMarkGroupMemberListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('DartMarkGroupMemberList');
  late final _DartMarkGroupMemberList = _DartMarkGroupMemberListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, bool,
          ffi.Pointer<ffi.Void>)>();

  /// 群申请
  int DartGetGroupPendencyList(
    ffi.Pointer<ffi.Char> json_group_get_pendency_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetGroupPendencyList(
      json_group_get_pendency_list_param,
      user_data,
    );
  }

  late final _DartGetGroupPendencyListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetGroupPendencyList');
  late final _DartGetGroupPendencyList = _DartGetGroupPendencyListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartHandleGroupPendency(
    ffi.Pointer<ffi.Char> json_group_handle_pendency_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartHandleGroupPendency(
      json_group_handle_pendency_param,
      user_data,
    );
  }

  late final _DartHandleGroupPendencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartHandleGroupPendency');
  late final _DartHandleGroupPendency = _DartHandleGroupPendencyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartMarkGroupPendencyRead(
    int time_stamp,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartMarkGroupPendencyRead(
      time_stamp,
      user_data,
    );
  }

  late final _DartMarkGroupPendencyReadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Uint64, ffi.Pointer<ffi.Void>)>>(
      'DartMarkGroupPendencyRead');
  late final _DartMarkGroupPendencyRead = _DartMarkGroupPendencyReadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  /// TIMCommunityManager 社群
  /// 社群全局回调
  void DartSetCommunityCreateTopicCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityCreateTopicCallback(
      user_data,
    );
  }

  late final _DartSetCommunityCreateTopicCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityCreateTopicCallback');
  late final _DartSetCommunityCreateTopicCallback =
      _DartSetCommunityCreateTopicCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityDeleteTopicCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityDeleteTopicCallback(
      user_data,
    );
  }

  late final _DartSetCommunityDeleteTopicCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityDeleteTopicCallback');
  late final _DartSetCommunityDeleteTopicCallback =
      _DartSetCommunityDeleteTopicCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityChangeTopicInfoCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityChangeTopicInfoCallback(
      user_data,
    );
  }

  late final _DartSetCommunityChangeTopicInfoCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityChangeTopicInfoCallback');
  late final _DartSetCommunityChangeTopicInfoCallback =
      _DartSetCommunityChangeTopicInfoCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityReceiveTopicRESTCustomDataCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityReceiveTopicRESTCustomDataCallback(
      user_data,
    );
  }

  late final _DartSetCommunityReceiveTopicRESTCustomDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityReceiveTopicRESTCustomDataCallback');
  late final _DartSetCommunityReceiveTopicRESTCustomDataCallback =
      _DartSetCommunityReceiveTopicRESTCustomDataCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityCreatePermissionGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityCreatePermissionGroupCallback(
      user_data,
    );
  }

  late final _DartSetCommunityCreatePermissionGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityCreatePermissionGroupCallback');
  late final _DartSetCommunityCreatePermissionGroupCallback =
      _DartSetCommunityCreatePermissionGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityDeletePermissionGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityDeletePermissionGroupCallback(
      user_data,
    );
  }

  late final _DartSetCommunityDeletePermissionGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityDeletePermissionGroupCallback');
  late final _DartSetCommunityDeletePermissionGroupCallback =
      _DartSetCommunityDeletePermissionGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityChangePermissionGroupInfoCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityChangePermissionGroupInfoCallback(
      user_data,
    );
  }

  late final _DartSetCommunityChangePermissionGroupInfoCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityChangePermissionGroupInfoCallback');
  late final _DartSetCommunityChangePermissionGroupInfoCallback =
      _DartSetCommunityChangePermissionGroupInfoCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityAddMembersToPermissionGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityAddMembersToPermissionGroupCallback(
      user_data,
    );
  }

  late final _DartSetCommunityAddMembersToPermissionGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityAddMembersToPermissionGroupCallback');
  late final _DartSetCommunityAddMembersToPermissionGroupCallback =
      _DartSetCommunityAddMembersToPermissionGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityRemoveMembersFromPermissionGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityRemoveMembersFromPermissionGroupCallback(
      user_data,
    );
  }

  late final _DartSetCommunityRemoveMembersFromPermissionGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityRemoveMembersFromPermissionGroupCallback');
  late final _DartSetCommunityRemoveMembersFromPermissionGroupCallback =
      _DartSetCommunityRemoveMembersFromPermissionGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityAddTopicPermissionCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityAddTopicPermissionCallback(
      user_data,
    );
  }

  late final _DartSetCommunityAddTopicPermissionCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityAddTopicPermissionCallback');
  late final _DartSetCommunityAddTopicPermissionCallback =
      _DartSetCommunityAddTopicPermissionCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityDeleteTopicPermissionCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityDeleteTopicPermissionCallback(
      user_data,
    );
  }

  late final _DartSetCommunityDeleteTopicPermissionCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityDeleteTopicPermissionCallback');
  late final _DartSetCommunityDeleteTopicPermissionCallback =
      _DartSetCommunityDeleteTopicPermissionCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetCommunityModifyTopicPermissionCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetCommunityModifyTopicPermissionCallback(
      user_data,
    );
  }

  late final _DartSetCommunityModifyTopicPermissionCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetCommunityModifyTopicPermissionCallback');
  late final _DartSetCommunityModifyTopicPermissionCallback =
      _DartSetCommunityModifyTopicPermissionCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 社群基本操作
  int DartCreateCommunity(
    ffi.Pointer<ffi.Char> json_group_create_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreateCommunity(
      json_group_create_param,
      user_data,
    );
  }

  late final _DartCreateCommunityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreateCommunity');
  late final _DartCreateCommunity = _DartCreateCommunityPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetJoinedCommunityList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetJoinedCommunityList(
      user_data,
    );
  }

  late final _DartGetJoinedCommunityListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetJoinedCommunityList');
  late final _DartGetJoinedCommunityList = _DartGetJoinedCommunityListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int DartCreateTopicInCommunity(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_topic_info,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreateTopicInCommunity(
      group_id,
      json_topic_info,
      user_data,
    );
  }

  late final _DartCreateTopicInCommunityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreateTopicInCommunity');
  late final _DartCreateTopicInCommunity =
      _DartCreateTopicInCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartDeleteTopicFromCommunity(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_topic_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteTopicFromCommunity(
      group_id,
      json_topic_id_array,
      user_data,
    );
  }

  late final _DartDeleteTopicFromCommunityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteTopicFromCommunity');
  late final _DartDeleteTopicFromCommunity =
      _DartDeleteTopicFromCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartSetTopicInfo(
    ffi.Pointer<ffi.Char> json_topic_info,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetTopicInfo(
      json_topic_info,
      user_data,
    );
  }

  late final _DartSetTopicInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetTopicInfo');
  late final _DartSetTopicInfo = _DartSetTopicInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetTopicInfoList(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_topic_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetTopicInfoList(
      group_id,
      json_topic_id_array,
      user_data,
    );
  }

  late final _DartGetTopicInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetTopicInfoList');
  late final _DartGetTopicInfoList = _DartGetTopicInfoListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartSetTopicInheritMessageReceiveOptionFromCommunity(
    ffi.Pointer<ffi.Char> topic_id,
    bool isInherit,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetTopicInheritMessageReceiveOptionFromCommunity(
      topic_id,
      isInherit,
      user_data,
    );
  }

  late final _DartSetTopicInheritMessageReceiveOptionFromCommunityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Pointer<ffi.Void>)>>(
      'DartSetTopicInheritMessageReceiveOptionFromCommunity');
  late final _DartSetTopicInheritMessageReceiveOptionFromCommunity =
      _DartSetTopicInheritMessageReceiveOptionFromCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, bool, ffi.Pointer<ffi.Void>)>();

  /// 权限组
  int DartCreatePermissionGroupInCommunity(
    ffi.Pointer<ffi.Char> json_permission_group_info,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreatePermissionGroupInCommunity(
      json_permission_group_info,
      user_data,
    );
  }

  late final _DartCreatePermissionGroupInCommunityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreatePermissionGroupInCommunity');
  late final _DartCreatePermissionGroupInCommunity =
      _DartCreatePermissionGroupInCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeletePermissionGroupFromCommunity(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_permission_group_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeletePermissionGroupFromCommunity(
      group_id,
      json_permission_group_id_array,
      user_data,
    );
  }

  late final _DartDeletePermissionGroupFromCommunityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Void>)>>(
      'DartDeletePermissionGroupFromCommunity');
  late final _DartDeletePermissionGroupFromCommunity =
      _DartDeletePermissionGroupFromCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartModifyPermissionGroupInfoInCommunity(
    ffi.Pointer<ffi.Char> json_permission_group_info,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyPermissionGroupInfoInCommunity(
      json_permission_group_info,
      user_data,
    );
  }

  late final _DartModifyPermissionGroupInfoInCommunityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartModifyPermissionGroupInfoInCommunity');
  late final _DartModifyPermissionGroupInfoInCommunity =
      _DartModifyPermissionGroupInfoInCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetJoinedPermissionGroupListInCommunity(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetJoinedPermissionGroupListInCommunity(
      group_id,
      user_data,
    );
  }

  late final _DartGetJoinedPermissionGroupListInCommunityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartGetJoinedPermissionGroupListInCommunity');
  late final _DartGetJoinedPermissionGroupListInCommunity =
      _DartGetJoinedPermissionGroupListInCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetPermissionGroupListInCommunity(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_permission_group_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetPermissionGroupListInCommunity(
      group_id,
      json_permission_group_id_array,
      user_data,
    );
  }

  late final _DartGetPermissionGroupListInCommunityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetPermissionGroupListInCommunity');
  late final _DartGetPermissionGroupListInCommunity =
      _DartGetPermissionGroupListInCommunityPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartAddCommunityMembersToPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_member_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddCommunityMembersToPermissionGroup(
      group_id,
      permission_group_id,
      json_member_id_array,
      user_data,
    );
  }

  late final _DartAddCommunityMembersToPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartAddCommunityMembersToPermissionGroup');
  late final _DartAddCommunityMembersToPermissionGroup =
      _DartAddCommunityMembersToPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartRemoveCommunityMembersFromPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_member_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartRemoveCommunityMembersFromPermissionGroup(
      group_id,
      permission_group_id,
      json_member_id_array,
      user_data,
    );
  }

  late final _DartRemoveCommunityMembersFromPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartRemoveCommunityMembersFromPermissionGroup');
  late final _DartRemoveCommunityMembersFromPermissionGroup =
      _DartRemoveCommunityMembersFromPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetCommunityMemberListInPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> next_cursor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetCommunityMemberListInPermissionGroup(
      group_id,
      permission_group_id,
      next_cursor,
      user_data,
    );
  }

  late final _DartGetCommunityMemberListInPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartGetCommunityMemberListInPermissionGroup');
  late final _DartGetCommunityMemberListInPermissionGroup =
      _DartGetCommunityMemberListInPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartAddTopicPermissionToPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_topic_permission_map,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddTopicPermissionToPermissionGroup(
      group_id,
      permission_group_id,
      json_topic_permission_map,
      user_data,
    );
  }

  late final _DartAddTopicPermissionToPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartAddTopicPermissionToPermissionGroup');
  late final _DartAddTopicPermissionToPermissionGroup =
      _DartAddTopicPermissionToPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteTopicPermissionFromPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_topic_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteTopicPermissionFromPermissionGroup(
      group_id,
      permission_group_id,
      json_topic_id_array,
      user_data,
    );
  }

  late final _DartDeleteTopicPermissionFromPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartDeleteTopicPermissionFromPermissionGroup');
  late final _DartDeleteTopicPermissionFromPermissionGroup =
      _DartDeleteTopicPermissionFromPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartModifyTopicPermissionInPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_topic_permission_map,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyTopicPermissionInPermissionGroup(
      group_id,
      permission_group_id,
      json_topic_permission_map,
      user_data,
    );
  }

  late final _DartModifyTopicPermissionInPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartModifyTopicPermissionInPermissionGroup');
  late final _DartModifyTopicPermissionInPermissionGroup =
      _DartModifyTopicPermissionInPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetTopicPermissionInPermissionGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> permission_group_id,
    ffi.Pointer<ffi.Char> json_topic_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetTopicPermissionInPermissionGroup(
      group_id,
      permission_group_id,
      json_topic_id_array,
      user_data,
    );
  }

  late final _DartGetTopicPermissionInPermissionGroupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>(
      'DartGetTopicPermissionInPermissionGroup');
  late final _DartGetTopicPermissionInPermissionGroup =
      _DartGetTopicPermissionInPermissionGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// TIMConversationManager 会话
  /// 会话全局回调
  void DartSetConvEventCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvEventCallback(
      user_data,
    );
  }

  late final _DartSetConvEventCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvEventCallback');
  late final _DartSetConvEventCallback = _DartSetConvEventCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvTotalUnreadMessageCountChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvTotalUnreadMessageCountChangedCallback(
      user_data,
    );
  }

  late final _DartSetConvTotalUnreadMessageCountChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvTotalUnreadMessageCountChangedCallback');
  late final _DartSetConvTotalUnreadMessageCountChangedCallback =
      _DartSetConvTotalUnreadMessageCountChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvUnreadMessageCountChangedByFilterCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvUnreadMessageCountChangedByFilterCallback(
      user_data,
    );
  }

  late final _DartSetConvUnreadMessageCountChangedByFilterCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvUnreadMessageCountChangedByFilterCallback');
  late final _DartSetConvUnreadMessageCountChangedByFilterCallback =
      _DartSetConvUnreadMessageCountChangedByFilterCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvConversationGroupCreatedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvConversationGroupCreatedCallback(
      user_data,
    );
  }

  late final _DartSetConvConversationGroupCreatedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvConversationGroupCreatedCallback');
  late final _DartSetConvConversationGroupCreatedCallback =
      _DartSetConvConversationGroupCreatedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvConversationGroupDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvConversationGroupDeletedCallback(
      user_data,
    );
  }

  late final _DartSetConvConversationGroupDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvConversationGroupDeletedCallback');
  late final _DartSetConvConversationGroupDeletedCallback =
      _DartSetConvConversationGroupDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvConversationGroupNameChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvConversationGroupNameChangedCallback(
      user_data,
    );
  }

  late final _DartSetConvConversationGroupNameChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvConversationGroupNameChangedCallback');
  late final _DartSetConvConversationGroupNameChangedCallback =
      _DartSetConvConversationGroupNameChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvConversationsAddedToGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvConversationsAddedToGroupCallback(
      user_data,
    );
  }

  late final _DartSetConvConversationsAddedToGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvConversationsAddedToGroupCallback');
  late final _DartSetConvConversationsAddedToGroupCallback =
      _DartSetConvConversationsAddedToGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetConvConversationsDeletedFromGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConvConversationsDeletedFromGroupCallback(
      user_data,
    );
  }

  late final _DartSetConvConversationsDeletedFromGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetConvConversationsDeletedFromGroupCallback');
  late final _DartSetConvConversationsDeletedFromGroupCallback =
      _DartSetConvConversationsDeletedFromGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 会话基本操作
  int DartGetConversationList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetConversationList(
      user_data,
    );
  }

  late final _DartGetConversationListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetConversationList');
  late final _DartGetConversationList = _DartGetConversationListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  int DartGetConversation(
    ffi.Pointer<ffi.Char> json_get_conv_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetConversation(
      json_get_conv_list_param,
      user_data,
    );
  }

  late final _DartGetConversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetConversation');
  late final _DartGetConversation = _DartGetConversationPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetConversationListByFilter(
    ffi.Pointer<ffi.Char> filter,
    int next_seq,
    int count,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetConversationListByFilter(
      filter,
      next_seq,
      count,
      user_data,
    );
  }

  late final _DartGetConversationListByFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Uint64, ffi.Uint32,
              ffi.Pointer<ffi.Void>)>>('DartGetConversationListByFilter');
  late final _DartGetConversationListByFilter =
      _DartGetConversationListByFilterPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>)>();

  int DartDeleteConversation(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteConversation(
      conv_id,
      conv_type.value,
      user_data,
    );
  }

  late final _DartDeleteConversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('DartDeleteConversation');
  late final _DartDeleteConversation = _DartDeleteConversationPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int DartDeleteConversationList(
    ffi.Pointer<ffi.Char> conversation_id_array,
    bool clear_message,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteConversationList(
      conversation_id_array,
      clear_message,
      user_data,
    );
  }

  late final _DartDeleteConversationListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('DartDeleteConversationList');
  late final _DartDeleteConversationList =
      _DartDeleteConversationListPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, bool, ffi.Pointer<ffi.Void>)>();

  int DartSetConversationDraft(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    ffi.Pointer<ffi.Char> json_draft_param,
  ) {
    return _DartSetConversationDraft(
      conv_id,
      conv_type.value,
      json_draft_param,
    );
  }

  late final _DartSetConversationDraftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('DartSetConversationDraft');
  late final _DartSetConversationDraft =
      _DartSetConversationDraftPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int DartCancelConversationDraft(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
  ) {
    return _DartCancelConversationDraft(
      conv_id,
      conv_type.value,
    );
  }

  late final _DartCancelConversationDraftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('DartCancelConversationDraft');
  late final _DartCancelConversationDraft = _DartCancelConversationDraftPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int DartSetConversationCustomData(
    ffi.Pointer<ffi.Char> conversation_id_array,
    ffi.Pointer<ffi.Char> custom_data,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetConversationCustomData(
      conversation_id_array,
      custom_data,
      user_data,
    );
  }

  late final _DartSetConversationCustomDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetConversationCustomData');
  late final _DartSetConversationCustomData =
      _DartSetConversationCustomDataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartPinConversation(
    ffi.Pointer<ffi.Char> conv_id,
    TIMConvType conv_type,
    bool is_pinned,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartPinConversation(
      conv_id,
      conv_type.value,
      is_pinned,
      user_data,
    );
  }

  late final _DartPinConversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('DartPinConversation');
  late final _DartPinConversation = _DartPinConversationPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, bool, ffi.Pointer<ffi.Void>)>();

  int DartMarkConversation(
    ffi.Pointer<ffi.Char> conversation_id_array,
    int mark_type,
    bool enable_mark,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartMarkConversation(
      conversation_id_array,
      mark_type,
      enable_mark,
      user_data,
    );
  }

  late final _DartMarkConversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Uint64, ffi.Bool,
              ffi.Pointer<ffi.Void>)>>('DartMarkConversation');
  late final _DartMarkConversation = _DartMarkConversationPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, bool, ffi.Pointer<ffi.Void>)>();

  int DartGetTotalUnreadMessageCount(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetTotalUnreadMessageCount(
      user_data,
    );
  }

  late final _DartGetTotalUnreadMessageCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetTotalUnreadMessageCount');
  late final _DartGetTotalUnreadMessageCount =
      _DartGetTotalUnreadMessageCountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  int DartGetUnreadMessageCountByFilter(
    ffi.Pointer<ffi.Char> filter,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetUnreadMessageCountByFilter(
      filter,
      user_data,
    );
  }

  late final _DartGetUnreadMessageCountByFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetUnreadMessageCountByFilter');
  late final _DartGetUnreadMessageCountByFilter =
      _DartGetUnreadMessageCountByFilterPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSubscribeUnreadMessageCountByFilter(
    ffi.Pointer<ffi.Char> filter,
  ) {
    return _DartSubscribeUnreadMessageCountByFilter(
      filter,
    );
  }

  late final _DartSubscribeUnreadMessageCountByFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'DartSubscribeUnreadMessageCountByFilter');
  late final _DartSubscribeUnreadMessageCountByFilter =
      _DartSubscribeUnreadMessageCountByFilterPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  int DartUnsubscribeUnreadMessageCountByFilter(
    ffi.Pointer<ffi.Char> filter,
  ) {
    return _DartUnsubscribeUnreadMessageCountByFilter(
      filter,
    );
  }

  late final _DartUnsubscribeUnreadMessageCountByFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'DartUnsubscribeUnreadMessageCountByFilter');
  late final _DartUnsubscribeUnreadMessageCountByFilter =
      _DartUnsubscribeUnreadMessageCountByFilterPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  int DartCleanConversationUnreadMessageCount(
    ffi.Pointer<ffi.Char> conversation_id,
    int clean_timestamp,
    int clean_sequence,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCleanConversationUnreadMessageCount(
      conversation_id,
      clean_timestamp,
      clean_sequence,
      user_data,
    );
  }

  late final _DartCleanConversationUnreadMessageCountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Uint64, ffi.Uint64,
                  ffi.Pointer<ffi.Void>)>>(
      'DartCleanConversationUnreadMessageCount');
  late final _DartCleanConversationUnreadMessageCount =
      _DartCleanConversationUnreadMessageCountPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>)>();

  /// 会话分组
  int DartCreateConversationGroup(
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> conversation_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreateConversationGroup(
      group_name,
      conversation_id_array,
      user_data,
    );
  }

  late final _DartCreateConversationGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreateConversationGroup');
  late final _DartCreateConversationGroup =
      _DartCreateConversationGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartGetConversationGroupList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetConversationGroupList(
      user_data,
    );
  }

  late final _DartGetConversationGroupListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetConversationGroupList');
  late final _DartGetConversationGroupList = _DartGetConversationGroupListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int DartDeleteConversationGroup(
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteConversationGroup(
      group_name,
      user_data,
    );
  }

  late final _DartDeleteConversationGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteConversationGroup');
  late final _DartDeleteConversationGroup = _DartDeleteConversationGroupPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartRenameConversationGroup(
    ffi.Pointer<ffi.Char> old_name,
    ffi.Pointer<ffi.Char> new_name,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartRenameConversationGroup(
      old_name,
      new_name,
      user_data,
    );
  }

  late final _DartRenameConversationGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartRenameConversationGroup');
  late final _DartRenameConversationGroup =
      _DartRenameConversationGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartAddConversationsToGroup(
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> conversation_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddConversationsToGroup(
      group_name,
      conversation_id_array,
      user_data,
    );
  }

  late final _DartAddConversationsToGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartAddConversationsToGroup');
  late final _DartAddConversationsToGroup =
      _DartAddConversationsToGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  int DartDeleteConversationsFromGroup(
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> conversation_id_array,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteConversationsFromGroup(
      group_name,
      conversation_id_array,
      user_data,
    );
  }

  late final _DartDeleteConversationsFromGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteConversationsFromGroup');
  late final _DartDeleteConversationsFromGroup =
      _DartDeleteConversationsFromGroupPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>();

  /// TIMFriendshipManager 关系链
  /// 关系链全局回调
  void DartSetOnAddFriendCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOnAddFriendCallback(
      user_data,
    );
  }

  late final _DartSetOnAddFriendCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOnAddFriendCallback');
  late final _DartSetOnAddFriendCallback = _DartSetOnAddFriendCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetOnDeleteFriendCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOnDeleteFriendCallback(
      user_data,
    );
  }

  late final _DartSetOnDeleteFriendCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOnDeleteFriendCallback');
  late final _DartSetOnDeleteFriendCallback = _DartSetOnDeleteFriendCallbackPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetUpdateFriendProfileCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetUpdateFriendProfileCallback(
      user_data,
    );
  }

  late final _DartSetUpdateFriendProfileCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetUpdateFriendProfileCallback');
  late final _DartSetUpdateFriendProfileCallback =
      _DartSetUpdateFriendProfileCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendAddRequestCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendAddRequestCallback(
      user_data,
    );
  }

  late final _DartSetFriendAddRequestCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendAddRequestCallback');
  late final _DartSetFriendAddRequestCallback =
      _DartSetFriendAddRequestCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendApplicationListDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendApplicationListDeletedCallback(
      user_data,
    );
  }

  late final _DartSetFriendApplicationListDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendApplicationListDeletedCallback');
  late final _DartSetFriendApplicationListDeletedCallback =
      _DartSetFriendApplicationListDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendApplicationListReadCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendApplicationListReadCallback(
      user_data,
    );
  }

  late final _DartSetFriendApplicationListReadCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendApplicationListReadCallback');
  late final _DartSetFriendApplicationListReadCallback =
      _DartSetFriendApplicationListReadCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendBlackListAddedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendBlackListAddedCallback(
      user_data,
    );
  }

  late final _DartSetFriendBlackListAddedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendBlackListAddedCallback');
  late final _DartSetFriendBlackListAddedCallback =
      _DartSetFriendBlackListAddedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendBlackListDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendBlackListDeletedCallback(
      user_data,
    );
  }

  late final _DartSetFriendBlackListDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendBlackListDeletedCallback');
  late final _DartSetFriendBlackListDeletedCallback =
      _DartSetFriendBlackListDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendGroupCreatedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendGroupCreatedCallback(
      user_data,
    );
  }

  late final _DartSetFriendGroupCreatedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendGroupCreatedCallback');
  late final _DartSetFriendGroupCreatedCallback =
      _DartSetFriendGroupCreatedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendGroupDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendGroupDeletedCallback(
      user_data,
    );
  }

  late final _DartSetFriendGroupDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendGroupDeletedCallback');
  late final _DartSetFriendGroupDeletedCallback =
      _DartSetFriendGroupDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendGroupNameChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendGroupNameChangedCallback(
      user_data,
    );
  }

  late final _DartSetFriendGroupNameChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendGroupNameChangedCallback');
  late final _DartSetFriendGroupNameChangedCallback =
      _DartSetFriendGroupNameChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendsAddedToGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendsAddedToGroupCallback(
      user_data,
    );
  }

  late final _DartSetFriendsAddedToGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendsAddedToGroupCallback');
  late final _DartSetFriendsAddedToGroupCallback =
      _DartSetFriendsAddedToGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetFriendsDeletedFromGroupCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendsDeletedFromGroupCallback(
      user_data,
    );
  }

  late final _DartSetFriendsDeletedFromGroupCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetFriendsDeletedFromGroupCallback');
  late final _DartSetFriendsDeletedFromGroupCallback =
      _DartSetFriendsDeletedFromGroupCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetOfficialAccountSubscribedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOfficialAccountSubscribedCallback(
      user_data,
    );
  }

  late final _DartSetOfficialAccountSubscribedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOfficialAccountSubscribedCallback');
  late final _DartSetOfficialAccountSubscribedCallback =
      _DartSetOfficialAccountSubscribedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetOfficialAccountUnsubscribedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOfficialAccountUnsubscribedCallback(
      user_data,
    );
  }

  late final _DartSetOfficialAccountUnsubscribedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOfficialAccountUnsubscribedCallback');
  late final _DartSetOfficialAccountUnsubscribedCallback =
      _DartSetOfficialAccountUnsubscribedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetOfficialAccountDeletedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOfficialAccountDeletedCallback(
      user_data,
    );
  }

  late final _DartSetOfficialAccountDeletedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOfficialAccountDeletedCallback');
  late final _DartSetOfficialAccountDeletedCallback =
      _DartSetOfficialAccountDeletedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetOfficialAccountInfoChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOfficialAccountInfoChangedCallback(
      user_data,
    );
  }

  late final _DartSetOfficialAccountInfoChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetOfficialAccountInfoChangedCallback');
  late final _DartSetOfficialAccountInfoChangedCallback =
      _DartSetOfficialAccountInfoChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMyFollowingListChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMyFollowingListChangedCallback(
      user_data,
    );
  }

  late final _DartSetMyFollowingListChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMyFollowingListChangedCallback');
  late final _DartSetMyFollowingListChangedCallback =
      _DartSetMyFollowingListChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMyFollowersListChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMyFollowersListChangedCallback(
      user_data,
    );
  }

  late final _DartSetMyFollowersListChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMyFollowersListChangedCallback');
  late final _DartSetMyFollowersListChangedCallback =
      _DartSetMyFollowersListChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetMutualFollowersListChangedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetMutualFollowersListChangedCallback(
      user_data,
    );
  }

  late final _DartSetMutualFollowersListChangedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetMutualFollowersListChangedCallback');
  late final _DartSetMutualFollowersListChangedCallback =
      _DartSetMutualFollowersListChangedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 好友添加、资料设置等
  int DartGetFriendList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetFriendList(
      user_data,
    );
  }

  late final _DartGetFriendListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetFriendList');
  late final _DartGetFriendList =
      _DartGetFriendListPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int DartGetFriendsInfo(
    ffi.Pointer<ffi.Char> friend_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetFriendsInfo(
      friend_id_list,
      user_data,
    );
  }

  late final _DartGetFriendsInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetFriendsInfo');
  late final _DartGetFriendsInfo = _DartGetFriendsInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetFriendInfo(
    ffi.Pointer<ffi.Char> json_modify_friend_info_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendInfo(
      json_modify_friend_info_param,
      user_data,
    );
  }

  late final _DartSetFriendInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetFriendInfo');
  late final _DartSetFriendInfo = _DartSetFriendInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSearchFriends(
    ffi.Pointer<ffi.Char> json_search_friends_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSearchFriends(
      json_search_friends_param,
      user_data,
    );
  }

  late final _DartSearchFriendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSearchFriends');
  late final _DartSearchFriends = _DartSearchFriendsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartAddFriend(
    ffi.Pointer<ffi.Char> json_add_friend_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddFriend(
      json_add_friend_param,
      user_data,
    );
  }

  late final _DartAddFriendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('DartAddFriend');
  late final _DartAddFriend = _DartAddFriendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteFromFriendList(
    ffi.Pointer<ffi.Char> json_delete_friend_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteFromFriendList(
      json_delete_friend_param,
      user_data,
    );
  }

  late final _DartDeleteFromFriendListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteFromFriendList');
  late final _DartDeleteFromFriendList = _DartDeleteFromFriendListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartCheckFriend(
    ffi.Pointer<ffi.Char> json_check_friend_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCheckFriend(
      json_check_friend_list_param,
      user_data,
    );
  }

  late final _DartCheckFriendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCheckFriend');
  late final _DartCheckFriend = _DartCheckFriendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// 好友申请
  int DartGetFriendApplicationList(
    ffi.Pointer<ffi.Char> json_get_pendency_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetFriendApplicationList(
      json_get_pendency_list_param,
      user_data,
    );
  }

  late final _DartGetFriendApplicationListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetFriendApplicationList');
  late final _DartGetFriendApplicationList = _DartGetFriendApplicationListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartHandleFriendAddRequest(
    ffi.Pointer<ffi.Char> json_handle_friend_add_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartHandleFriendAddRequest(
      json_handle_friend_add_param,
      user_data,
    );
  }

  late final _DartHandleFriendAddRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartHandleFriendAddRequest');
  late final _DartHandleFriendAddRequest = _DartHandleFriendAddRequestPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteFriendApplication(
    ffi.Pointer<ffi.Char> json_delete_pendency_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteFriendApplication(
      json_delete_pendency_param,
      user_data,
    );
  }

  late final _DartDeleteFriendApplicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteFriendApplication');
  late final _DartDeleteFriendApplication = _DartDeleteFriendApplicationPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartSetFriendApplicationRead(
    int time_stamp,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetFriendApplicationRead(
      time_stamp,
      user_data,
    );
  }

  late final _DartSetFriendApplicationReadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Uint64, ffi.Pointer<ffi.Void>)>>(
      'DartSetFriendApplicationRead');
  late final _DartSetFriendApplicationRead = _DartSetFriendApplicationReadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  /// 黑名单
  int DartGetBlackList(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetBlackList(
      user_data,
    );
  }

  late final _DartGetBlackListPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartGetBlackList');
  late final _DartGetBlackList =
      _DartGetBlackListPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int DartAddToBlackList(
    ffi.Pointer<ffi.Char> json_add_to_blacklist_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAddToBlackList(
      json_add_to_blacklist_param,
      user_data,
    );
  }

  late final _DartAddToBlackListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartAddToBlackList');
  late final _DartAddToBlackList = _DartAddToBlackListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteFromBlackList(
    ffi.Pointer<ffi.Char> json_delete_from_blacklist_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteFromBlackList(
      json_delete_from_blacklist_param,
      user_data,
    );
  }

  late final _DartDeleteFromBlackListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteFromBlackList');
  late final _DartDeleteFromBlackList = _DartDeleteFromBlackListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// 好友分组
  int DartCreateFriendGroup(
    ffi.Pointer<ffi.Char> json_create_friend_group_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCreateFriendGroup(
      json_create_friend_group_param,
      user_data,
    );
  }

  late final _DartCreateFriendGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCreateFriendGroup');
  late final _DartCreateFriendGroup = _DartCreateFriendGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetFriendGroupList(
    ffi.Pointer<ffi.Char> json_get_friend_group_list_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetFriendGroupList(
      json_get_friend_group_list_param,
      user_data,
    );
  }

  late final _DartGetFriendGroupListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetFriendGroupList');
  late final _DartGetFriendGroupList = _DartGetFriendGroupListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDeleteFriendGroup(
    ffi.Pointer<ffi.Char> json_delete_friend_group_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDeleteFriendGroup(
      json_delete_friend_group_param,
      user_data,
    );
  }

  late final _DartDeleteFriendGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartDeleteFriendGroup');
  late final _DartDeleteFriendGroup = _DartDeleteFriendGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartModifyFriendGroup(
    ffi.Pointer<ffi.Char> json_modify_friend_group_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyFriendGroup(
      json_modify_friend_group_param,
      user_data,
    );
  }

  late final _DartModifyFriendGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartModifyFriendGroup');
  late final _DartModifyFriendGroup = _DartModifyFriendGroupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// 公众号
  int DartSubscribeOfficialAccount(
    ffi.Pointer<ffi.Char> official_account_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSubscribeOfficialAccount(
      official_account_id,
      user_data,
    );
  }

  late final _DartSubscribeOfficialAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSubscribeOfficialAccount');
  late final _DartSubscribeOfficialAccount = _DartSubscribeOfficialAccountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartUnsubscribeOfficialAccount(
    ffi.Pointer<ffi.Char> unsubscribe_official_account_id,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartUnsubscribeOfficialAccount(
      unsubscribe_official_account_id,
      user_data,
    );
  }

  late final _DartUnsubscribeOfficialAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartUnsubscribeOfficialAccount');
  late final _DartUnsubscribeOfficialAccount =
      _DartUnsubscribeOfficialAccountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetOfficialAccountsInfo(
    ffi.Pointer<ffi.Char> json_official_account_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetOfficialAccountsInfo(
      json_official_account_id_list,
      user_data,
    );
  }

  late final _DartGetOfficialAccountsInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetOfficialAccountsInfo');
  late final _DartGetOfficialAccountsInfo = _DartGetOfficialAccountsInfoPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// 关注/粉丝
  int DartFollowUser(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartFollowUser(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartFollowUserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('DartFollowUser');
  late final _DartFollowUser = _DartFollowUserPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartUnfollowUser(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartUnfollowUser(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartUnfollowUserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartUnfollowUser');
  late final _DartUnfollowUser = _DartUnfollowUserPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetMyFollowingList(
    ffi.Pointer<ffi.Char> next_cursor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMyFollowingList(
      next_cursor,
      user_data,
    );
  }

  late final _DartGetMyFollowingListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMyFollowingList');
  late final _DartGetMyFollowingList = _DartGetMyFollowingListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetMyFollowersList(
    ffi.Pointer<ffi.Char> next_cursor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMyFollowersList(
      next_cursor,
      user_data,
    );
  }

  late final _DartGetMyFollowersListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMyFollowersList');
  late final _DartGetMyFollowersList = _DartGetMyFollowersListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetMutualFollowersList(
    ffi.Pointer<ffi.Char> next_cursor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetMutualFollowersList(
      next_cursor,
      user_data,
    );
  }

  late final _DartGetMutualFollowersListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetMutualFollowersList');
  late final _DartGetMutualFollowersList = _DartGetMutualFollowersListPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartGetUserFollowInfo(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetUserFollowInfo(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartGetUserFollowInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetUserFollowInfo');
  late final _DartGetUserFollowInfo = _DartGetUserFollowInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartCheckFollowType(
    ffi.Pointer<ffi.Char> json_user_id_list,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCheckFollowType(
      json_user_id_list,
      user_data,
    );
  }

  late final _DartCheckFollowTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCheckFollowType');
  late final _DartCheckFollowType = _DartCheckFollowTypePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// TIMSignalingManager 信令
  /// 信令全局回调
  void DartSetSignalingReceiveNewInvitationCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingReceiveNewInvitationCallback(
      user_data,
    );
  }

  late final _DartSetSignalingReceiveNewInvitationCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingReceiveNewInvitationCallback');
  late final _DartSetSignalingReceiveNewInvitationCallback =
      _DartSetSignalingReceiveNewInvitationCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSignalingInvitationCancelledCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingInvitationCancelledCallback(
      user_data,
    );
  }

  late final _DartSetSignalingInvitationCancelledCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingInvitationCancelledCallback');
  late final _DartSetSignalingInvitationCancelledCallback =
      _DartSetSignalingInvitationCancelledCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSignalingInviteeAcceptedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingInviteeAcceptedCallback(
      user_data,
    );
  }

  late final _DartSetSignalingInviteeAcceptedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingInviteeAcceptedCallback');
  late final _DartSetSignalingInviteeAcceptedCallback =
      _DartSetSignalingInviteeAcceptedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSignalingInviteeRejectedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingInviteeRejectedCallback(
      user_data,
    );
  }

  late final _DartSetSignalingInviteeRejectedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingInviteeRejectedCallback');
  late final _DartSetSignalingInviteeRejectedCallback =
      _DartSetSignalingInviteeRejectedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSignalingInvitationTimeoutCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingInvitationTimeoutCallback(
      user_data,
    );
  }

  late final _DartSetSignalingInvitationTimeoutCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingInvitationTimeoutCallback');
  late final _DartSetSignalingInvitationTimeoutCallback =
      _DartSetSignalingInvitationTimeoutCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  void DartSetSignalingInvitationModifiedCallback(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetSignalingInvitationModifiedCallback(
      user_data,
    );
  }

  late final _DartSetSignalingInvitationModifiedCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'DartSetSignalingInvitationModifiedCallback');
  late final _DartSetSignalingInvitationModifiedCallback =
      _DartSetSignalingInvitationModifiedCallbackPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// 信令基本操作
  int DartInvite(
    ffi.Pointer<ffi.Char> invitee,
    ffi.Pointer<ffi.Char> data,
    bool online_user_only,
    ffi.Pointer<ffi.Char> json_offline_push_info,
    int timeout,
    ffi.Pointer<ffi.Char> invite_id_buffer,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartInvite(
      invitee,
      data,
      online_user_only,
      json_offline_push_info,
      timeout,
      invite_id_buffer,
      user_data,
    );
  }

  late final _DartInvitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartInvite');
  late final _DartInvite = _DartInvitePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          bool,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartInviteInGroup(
    ffi.Pointer<ffi.Char> group_id,
    ffi.Pointer<ffi.Char> json_invitee_array,
    ffi.Pointer<ffi.Char> data,
    bool online_user_only,
    int timeout,
    ffi.Pointer<ffi.Char> invite_id_buffer,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartInviteInGroup(
      group_id,
      json_invitee_array,
      data,
      online_user_only,
      timeout,
      invite_id_buffer,
      user_data,
    );
  }

  late final _DartInviteInGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartInviteInGroup');
  late final _DartInviteInGroup = _DartInviteInGroupPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          bool,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartCancel(
    ffi.Pointer<ffi.Char> invite_id,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCancel(
      invite_id,
      data,
      user_data,
    );
  }

  late final _DartCancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCancel');
  late final _DartCancel = _DartCancelPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartAccept(
    ffi.Pointer<ffi.Char> invite_id,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartAccept(
      invite_id,
      data,
      user_data,
    );
  }

  late final _DartAcceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartAccept');
  late final _DartAccept = _DartAcceptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartReject(
    ffi.Pointer<ffi.Char> invite_id,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartReject(
      invite_id,
      data,
      user_data,
    );
  }

  late final _DartRejectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartReject');
  late final _DartReject = _DartRejectPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  int DartGetSignalingInfo(
    ffi.Pointer<ffi.Char> json_msg,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartGetSignalingInfo(
      json_msg,
      user_data,
    );
  }

  late final _DartGetSignalingInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartGetSignalingInfo');
  late final _DartGetSignalingInfo = _DartGetSignalingInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartModifyInvitation(
    ffi.Pointer<ffi.Char> invite_id,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartModifyInvitation(
      invite_id,
      data,
      user_data,
    );
  }

  late final _DartModifyInvitationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartModifyInvitation');
  late final _DartModifyInvitation = _DartModifyInvitationPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  /// TIMOfflinePushManager 离线推送
  int DartSetOfflinePushToken(
    ffi.Pointer<ffi.Char> json_token,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartSetOfflinePushToken(
      json_token,
      user_data,
    );
  }

  late final _DartSetOfflinePushTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartSetOfflinePushToken');
  late final _DartSetOfflinePushToken = _DartSetOfflinePushTokenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int DartDoBackground(
    int unread_count,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDoBackground(
      unread_count,
      user_data,
    );
  }

  late final _DartDoBackgroundPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Uint32, ffi.Pointer<ffi.Void>)>>(
      'DartDoBackground');
  late final _DartDoBackground = _DartDoBackgroundPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  int DartDoForeground(
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartDoForeground(
      user_data,
    );
  }

  late final _DartDoForegroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'DartDoForeground');
  late final _DartDoForeground =
      _DartDoForegroundPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// 实验性 API
  int DartCallExperimentalAPI(
    ffi.Pointer<ffi.Char> json_param,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _DartCallExperimentalAPI(
      json_param,
      user_data,
    );
  }

  late final _DartCallExperimentalAPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('DartCallExperimentalAPI');
  late final _DartCallExperimentalAPI = _DartCallExperimentalAPIPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();
}

/// //////////////////////////////////////////////////////////////////////////////
///
/// 一. SDK 接口常用配置选项
///
/// //////////////////////////////////////////////////////////////////////////////
/// 1.1 调用接口的返回值（若接口参数中有回调，只有当接口返回 TIM_SUCC 时，回调才会被调用）
enum TIMResult {
  /// 接口调用成功
  TIM_SUCC(0),

  /// 接口调用失败，ImSDK 未初始化
  TIM_ERR_SDKUNINIT(-1),

  /// 接口调用失败，用户未登录
  TIM_ERR_NOTLOGIN(-2),

  /// 接口调用失败，错误的 Json 格式或 Json Key
  TIM_ERR_JSON(-3),

  /// 接口调用失败，参数错误
  TIM_ERR_PARAM(-4),

  /// 接口调用失败，无效的会话
  TIM_ERR_CONV(-5),

  /// 接口调用失败，无效的群组
  TIM_ERR_GROUP(-6);

  final int value;
  const TIMResult(this.value);

  static TIMResult fromValue(int value) => switch (value) {
        0 => TIM_SUCC,
        -1 => TIM_ERR_SDKUNINIT,
        -2 => TIM_ERR_NOTLOGIN,
        -3 => TIM_ERR_JSON,
        -4 => TIM_ERR_PARAM,
        -5 => TIM_ERR_CONV,
        -6 => TIM_ERR_GROUP,
        _ => throw ArgumentError("Unknown value for TIMResult: $value"),
      };
}

/// 1.2 会话类型
enum TIMConvType {
  /// 无效会话
  kTIMConv_Invalid(0),

  /// 个人会话
  kTIMConv_C2C(1),

  /// 群组会话
  kTIMConv_Group(2),

  /// 系统会话，已废弃
  kTIMConv_System(3);

  final int value;
  const TIMConvType(this.value);

  static TIMConvType fromValue(int value) => switch (value) {
        0 => kTIMConv_Invalid,
        1 => kTIMConv_C2C,
        2 => kTIMConv_Group,
        3 => kTIMConv_System,
        _ => throw ArgumentError("Unknown value for TIMConvType: $value"),
      };
}

/// 1.3 消息接收选项
enum TIMReceiveMessageOpt {
  /// 在线正常接收消息，离线时会进行 APNs 推送
  kTIMRecvMsgOpt_Receive(0),

  /// 不会接收到消息，离线不会有推送通知
  kTIMRecvMsgOpt_Not_Receive(1),

  /// 在线正常接收消息，离线不会有推送通知
  kTIMRecvMsgOpt_Not_Notify(2),

  /// 在线接收消息，离线只接收 at 消息的推送
  kTIMRecvMsgOpt_Not_Notify_Except_At(3),

  /// 在线和离线都只接收@消息
  kTIMRecvMsgOpt_Not_Receive_Except_At(4);

  final int value;
  const TIMReceiveMessageOpt(this.value);

  static TIMReceiveMessageOpt fromValue(int value) => switch (value) {
        0 => kTIMRecvMsgOpt_Receive,
        1 => kTIMRecvMsgOpt_Not_Receive,
        2 => kTIMRecvMsgOpt_Not_Notify,
        3 => kTIMRecvMsgOpt_Not_Notify_Except_At,
        4 => kTIMRecvMsgOpt_Not_Receive_Except_At,
        _ =>
          throw ArgumentError("Unknown value for TIMReceiveMessageOpt: $value"),
      };
}

/// //////////////////////////////////////////////////////////////////////////////
///
/// 错误码
///
/// //////////////////////////////////////////////////////////////////////////////
/// 详细 [错误码](https://cloud.tencent.com/document/product/269/1671)，请您移步官网查看
enum TIMErrCode {
  /// 无错误。
  ERR_SUCC(0),

  /// 执行中，请做好接口调用控制，例如，第一次初始化操作在回调前，后续的初始化操作会返回该错误码。
  ERR_IN_PROGESS(6015),

  /// 参数无效，请检查参数是否符合要求，具体可查看错误信息进一步定义哪个字段。
  ERR_INVALID_PARAMETERS(6017),

  /// 操作本地 IO 错误，检查是否有读写权限，磁盘是否已满。
  ERR_IO_OPERATION_FAILED(6022),

  /// 错误的 JSON 格式，请检查参数是否符合接口的要求，具体可查看错误信息进一步定义哪个字段。
  ERR_INVALID_JSON(6027),

  /// 内存不足，可能存在内存泄漏，iOS 平台使用 Instrument 工具，Android 平台使用 Profiler 工具，分析出什么地方的内存占用高。
  ERR_OUT_OF_MEMORY(6028),

  /// PB 解析失败，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_PARSE_RESPONSE_FAILED(6001),

  /// PB 序列化失败，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SERIALIZE_REQ_FAILED(6002),

  /// IM SDK 未初始化，初始化成功回调之后重试。
  ERR_SDK_NOT_INITIALIZED(6013),

  /// 加载本地数据库操作失败，可能存储文件有损坏，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 联系客服定位具体问题。
  ERR_LOADMSG_FAILED(6005),

  /// 本地数据库操作失败，可能是部分目录无权限或者数据库文件已损坏。
  ERR_DATABASE_OPERATE_FAILED(6019),

  /// 跨线程错误，不能在跨越不同线程中执行，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_COMM_CROSS_THREAD(7001),

  /// TinyId 为空，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_COMM_TINYID_EMPTY(7002),

  /// Identifier 非法，必须不为空，要求可打印 ASCII 字符（0x20-0x7e），长度不超过32字节。
  ERR_SDK_COMM_INVALID_IDENTIFIER(7003),

  /// 文件不存在，请检查文件路径是否正确。
  ERR_SDK_COMM_FILE_NOT_FOUND(7004),

  /// 文件大小超出了限制，语音、图片，最大限制是28MB，视频、文件，最大限制 100M
  ERR_SDK_COMM_FILE_TOO_LARGE(7005),

  /// 空文件，要求文件大小不是0字节，如果上传图片、语音、视频或文件，请检查文件是否正确生成。
  ERR_SDK_COMM_FILE_SIZE_EMPTY(7006),

  /// 文件打开失败，请检查文件是否存在，或者已被独占打开，引起 SDK 打开失败。
  ERR_SDK_COMM_FILE_OPEN_FAILED(7007),

  /// API 调用超频
  ERR_SDK_COMM_API_CALL_FREQUENCY_LIMIT(7008),

  /// 正在执行时被终止，例如正在登录时，调用 unInit 停止使用 SDK 。
  ERR_SDK_COMM_INTERRUPT(7009),

  /// database 操作失败
  ERR_SDK_COMM_DATABASE_FAILURE(7010),

  /// database 查询的数据不存在
  ERR_SDK_COMM_DATABASE_NOTFOUND(7011),

  /// SDK 内部不应该出现的内部错误
  ERR_SDK_INTERNAL_ERROR(7012),

  /// 套餐包不支持该接口的使用，请升级到旗舰版套餐
  ERR_SDK_INTERFACE_NOT_SUPPORT(7013),

  /// 非法请求
  ERR_SDK_INVALID_OPERATION(7014),

  /// IM SDK 未登录，请先登录，成功回调之后重试，或者已被踢下线，可使用 TIMManager getLoginUser 检查当前是否在线。
  ERR_SDK_NOT_LOGGED_IN(6014),

  /// 自动登录时，并没有登录过该用户，这时候请调用 login 接口重新登录。
  ERR_NO_PREVIOUS_LOGIN(6026),

  /// UserSig 过期，请重新获取有效的 UserSig 后再重新登录。
  ERR_USER_SIG_EXPIRED(6206),

  /// 其他终端登录同一个账号，引起已登录的账号被踢，需重新登录。
  ERR_LOGIN_KICKED_OFF_BY_OTHER(6208),

  /// 登录正在执行中，例如，第一次 login 或 autoLogin 操作在回调前，后续的 login 或 autoLogin 操作会返回该错误码。
  ERR_SDK_ACCOUNT_LOGIN_IN_PROCESS(7501),

  /// 登出正在执行中，例如，第一次 logout 操作在回调前，后续的 logout 操作会返回该错误码。
  ERR_SDK_ACCOUNT_LOGOUT_IN_PROCESS(7502),

  /// TLS SDK 初始化失败，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_INIT_FAILED(7503),

  /// TLS SDK 未初始化，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_NOT_INITIALIZED(7504),

  /// TLS SDK TRANS 包格式错误，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_TRANSPKG_ERROR(7505),

  /// TLS SDK 解密失败，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_DECRYPT_FAILED(7506),

  /// TLS SDK 请求失败，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_REQUEST_FAILED(7507),

  /// TLS SDK 请求超时，内部错误，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_SDK_ACCOUNT_TLS_REQUEST_TIMEOUT(7508),

  /// 会话无效，getConversation 时检查是否已经登录，如未登录获取会话，会有此错误码返回。
  ERR_INVALID_CONVERSATION(6004),

  /// 文件传输鉴权失败，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_FILE_TRANS_AUTH_FAILED(6006),

  /// 文件传输获取 Server 列表失败，可 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 提供使用接口、错误码、错误信息给客服解决。
  ERR_FILE_TRANS_NO_SERVER(6007),

  /// 文件传输上传失败，请检查网络是否连接。
  ERR_FILE_TRANS_UPLOAD_FAILED(6008),

  /// 文件传输上传失败，请检查上传的图片是否能够正常打开。
  ERR_IMAGE_UPLOAD_FAILED_NOTIMAGE(6031),

  /// 文件传输下载失败，请检查网络，或者文件、语音是否已经过期，目前资源文件存储7天。
  ERR_FILE_TRANS_DOWNLOAD_FAILED(6009),

  /// HTTP 请求失败，请检查 URL 地址是否合法，可在网页浏览器尝试访问该 URL 地址。
  ERR_HTTP_REQ_FAILED(6010),

  /// IM SDK 无效消息 elem，具体可查看错误信息进一步定义哪个字段。
  ERR_INVALID_MSG_ELEM(6016),

  /// 无效的对象，例如用户自己生成 TIMImage 对象，或内部赋值错误导致对象无效。
  ERR_INVALID_SDK_OBJECT(6021),

  /// 无效的消息接收方，请在 IM 控制台检查消息的接收方是否存在。
  ERR_INVALID_MSG_RECEIVER(6032),

  /// 消息长度超出限制，消息长度不要超过12k，消息长度是各个 elem 长度的总和，elem 长度是所有 elem 字段的长度总和。
  ERR_SDK_MSG_BODY_SIZE_LIMIT(8001),

  /// 消息 KEY 错误，内部错误，网络请求包的 KEY 和 回复包的不一致。
  ERR_SDK_MSG_KEY_REQ_DIFFER_RSP(8002),

  /// 万象优图 HTTP 请求失败。
  ERR_SDK_IMAGE_CONVERT_ERROR(8003),

  /// 万象优图因为鉴黄等原因转缩略图失败。
  ERR_SDK_IMAGE_CI_BLOCK(8004),

  /// 合并消息嵌套层数超过上限（上限 100 层）。
  ERR_MERGER_MSG_LAYERS_OVER_LIMIT(8005),

  /// 消息修改冲突，您请求修改的消息已经被其他人修改。
  ERR_SDK_MSG_MODIFY_CONFLICT(8006),

  /// 信令请求 ID 无效或已经被处理过。（上层接口使用，底层为了不重复也增加一份）
  ERR_SDK_SIGNALING_INVALID_INVITE_ID(8010),

  /// 信令请求无权限，比如取消非自己发起的邀请。（上层接口使用，底层为了不重复也增加一份）
  ERR_SDK_SIGNALING_NO_PERMISSION(8011),

  /// 取消消息时，取消的消息不存在，或者已经发送成功。取消失败
  ERR_SDK_INVALID_CANCEL_MESSAGE(8020),

  /// 消息发送失败，因为该消息已被取消
  ERR_SDK_SEND_MESSAGE_FAILED_WITH_CANCEL(8021),

  /// 群组 ID 非法，自定义群组 ID 必须为可打印 ASCII 字符（0x20-0x7e），最长48个字节，且前缀不能为 @TGS#（避免与服务端默认分配的群组 ID 混淆）。
  ERR_SDK_GROUP_INVALID_ID(8501),

  /// 群名称非法，群名称最长30字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_GROUP_INVALID_NAME(8502),

  /// 群简介非法，群简介最长240字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_GROUP_INVALID_INTRODUCTION(8503),

  /// 群公告非法，群公告最长300字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_GROUP_INVALID_NOTIFICATION(8504),

  /// 群头像 URL 非法，群头像 URL 最长100字节，可在网页浏览器尝试访问该 URL 地址。
  ERR_SDK_GROUP_INVALID_FACE_URL(8505),

  /// 群名片非法，群名片最长50字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_GROUP_INVALID_NAME_CARD(8506),

  /// 超过群组成员数的限制，在创建群和邀请成员时，指定的成员数超出限制，最大群成员数量：私有群是200人，公开群是2000人，聊天室是10000人，音视频聊天室和在线成员广播大群无限制。
  ERR_SDK_GROUP_MEMBER_COUNT_LIMIT(8507),

  /// 不允许申请加入 Private 群组，任意群成员可邀请入群，且无需被邀请人同意。
  ERR_SDK_GROUP_JOIN_PRIVATE_GROUP_DENY(8508),

  /// 不允许邀请角色为群主的成员，请检查角色字段是否填写正确。
  ERR_SDK_GROUP_INVITE_SUPER_DENY(8509),

  /// 不允许邀请0个成员，请检查成员字段是否填写正确。
  ERR_SDK_GROUP_INVITE_NO_MEMBER(8510),

  /// 群属性接口操作限制：增删改接口后台限制1秒5次，查接口 SDK 限制5秒20次。
  ERR_SDK_GROUP_ATTR_FREQUENCY_LIMIT(8511),

  /// 获取群在线人数接口操作限制：查接口 SDK 限制60秒1次。
  ERR_SDK_GROUP_GET_ONLINE_MEMBER_COUNT_LIMIT(8512),

  /// 获取群资料接口操作限制：查接口 SDK 限制1秒1次。
  ERR_SDK_GROUP_GET_GROUPS_INFO_LIMIT(8513),

  /// 获取加入群列表接口操作限制：查接口 SDK 限制1秒1次。
  ERR_SDK_GROUP_GET_JOINED_GROUP_LIMIT(8514),

  /// 资料字段非法，资料支持标配字段及自定义字段，其中自定义字段的关键字，必须是英文字母，且长度不得超过8字节，自定义字段的值最长不能超过500字节。
  ERR_SDK_FRIENDSHIP_INVALID_PROFILE_KEY(9001),

  /// 备注字段非法，最大96字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_FRIENDSHIP_INVALID_ADD_REMARK(9002),

  /// 请求添加好友的请求说明字段非法，最大120字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_FRIENDSHIP_INVALID_ADD_WORDING(9003),

  /// 请求添加好友的添加来源字段非法，来源需要添加“AddSource_Type_”前缀。
  ERR_SDK_FRIENDSHIP_INVALID_ADD_SOURCE(9004),

  /// 好友分组字段非法，必须不为空，每个分组的名称最长30字节，字符编码必须是 UTF-8 ，如果包含中文，可能用多个字节表示一个中文字符，请注意检查字符串的字节长度。
  ERR_SDK_FRIENDSHIP_FRIEND_GROUP_EMPTY(9005),

  /// 超过数量限制
  ERR_SDK_FRIENDSHIP_EXCEED_THE_LIMIT(9006),

  /// 网络加密失败，内部错误。
  ERR_SDK_NET_ENCODE_FAILED(9501),

  /// 网络数据解密失败，内部错误。
  ERR_SDK_NET_DECODE_FAILED(9502),

  /// 未完成鉴权，可能登录未完成，请在登录完成后再操作。
  ERR_SDK_NET_AUTH_INVALID(9503),

  /// 数据包压缩失败，内部错误。
  ERR_SDK_NET_COMPRESS_FAILED(9504),

  /// 数据包解压失败，内部错误。
  ERR_SDK_NET_UNCOMPRESS_FAILED(9505),

  /// 调用频率限制，最大每秒发起 5 次请求。
  ERR_SDK_NET_FREQ_LIMIT(9506),

  /// 请求队列満，超过同时请求的数量限制，最大同时发起1000个请求。
  ERR_SDK_NET_REQ_COUNT_LIMIT(9507),

  /// 网络已断开，未建立连接，或者建立 socket 连接时，检测到无网络。
  ERR_SDK_NET_DISCONNECT(9508),

  /// 网络连接已建立，重复创建连接，内部错误。
  ERR_SDK_NET_ALLREADY_CONN(9509),

  /// 建立网络连接超时，请等网络恢复后重试。
  ERR_SDK_NET_CONN_TIMEOUT(9510),

  /// 网络连接已被拒绝，请求过于频繁，服务端拒绝服务。
  ERR_SDK_NET_CONN_REFUSE(9511),

  /// 没有到达网络的可用路由，请等网络恢复后重试。
  ERR_SDK_NET_NET_UNREACH(9512),

  /// 系统中没有足够的缓冲区空间资源可用来完成调用，系统过于繁忙，内部错误。
  ERR_SDK_NET_SOCKET_NO_BUFF(9513),

  /// 对端重置了连接，可能服务端过载，SDK 内部会自动重连，请等网络连接成功 onConnSucc （ iOS ） 或 onConnected （ Android ） 回调后重试。
  ERR_SDK_NET_RESET_BY_PEER(9514),

  /// socket 套接字无效，内部错误。
  ERR_SDK_NET_SOCKET_INVALID(9515),

  /// IP 地址解析失败，内部错误，可能是本地 imsdk_config 配置文件被损坏，读取到到 IP 地址非法。
  ERR_SDK_NET_HOST_GETADDRINFO_FAILED(9516),

  /// 网络连接到中间节点或服务端重置，引起连接失效，内部错误，SDK 内部会自动重连，请等网络连接成功 onConnSucc （ iOS ） 或 onConnected （ Android ） 回调后重试。
  ERR_SDK_NET_CONNECT_RESET(9517),

  /// 请求包等待进入待发送队列超时，发送时网络连接建立比较慢 或 频繁断网重连时，会出现该错误，请检查网络连接是否正常。
  ERR_SDK_NET_WAIT_INQUEUE_TIMEOUT(9518),

  /// 请求包已进入 IM SDK 待发送队列，等待进入操作系统的网络层时超时。一般可能原因是本地网络受限/不通或本地网络与 IM SDK 后台连接不通。建议用不同的网络环境分别运行 IM SDK 来确认是否因当前网络环境问题引起。
  ERR_SDK_NET_WAIT_SEND_TIMEOUT(9519),

  /// 请求包已由 IM SDK 待发送队列进入操作系统网络层，等待服务端回包超时。一般可能原因是本地网络受限/不通或本地网络与 IM SDK 后台连接不通。建议用不同的网络环境分别运行 IM SDK 来确认是否因当前网络环境问题引起。
  ERR_SDK_NET_WAIT_ACK_TIMEOUT(9520),

  /// 请求包已进入待发送队列，部分数据已发送，等待发送剩余部分出现超时，可能上行带宽不足，请检查网络是否畅通，在回调错误时检测有联网，内部错误。
  ERR_SDK_NET_WAIT_SEND_REMAINING_TIMEOUT(9521),

  /// 请求包长度大于限制，最大支持 1MB 。
  ERR_SDK_NET_PKG_SIZE_LIMIT(9522),

  /// 请求包已进入待发送队列，等待进入系统的网络 buffer 超时，数据包较多 或 发送线程处理不过来，在回调错误码时检测到没有联网。
  ERR_SDK_NET_WAIT_SEND_TIMEOUT_NO_NETWORK(9523),

  /// 请求包已进入系统的网络 buffer ，等待服务端回包超时，可能请求包没离开终端设备、中间路由丢弃、服务端意外丢包或回包被系统网络层丢弃，在回调错误码时检测到没有联网。
  ERR_SDK_NET_WAIT_ACK_TIMEOUT_NO_NETWORK(9524),

  /// 请求包已进入待发送队列，部分数据已发送，等待发送剩余部分出现超时，可能上行带宽不足，请检查网络是否畅通，在回调错误码时检测到没有联网。
  ERR_SDK_NET_SEND_REMAINING_TIMEOUT_NO_NETWORK(9525),

  /// Server 的连接数量超出限制，服务端拒绝服务。
  ERR_SVR_SSO_CONNECT_LIMIT(-302),

  /// 下发验证码标志错误。
  ERR_SVR_SSO_VCODE(-10000),

  /// Key 过期。Key 是根据 UserSig 生成的内部票据，Key 的有效期小于或等于 UserSig 的有效期。请重新调用 V2TIMManager.getInstance().login 登录接口生成新的 Key。
  ERR_SVR_SSO_D2_EXPIRED(-10001),

  /// Ticket 过期。Ticket 是根据 UserSig 生成的内部票据，Ticket 的有效期小于或等于 UserSig 的有效期。请重新调用 V2TIMManager.getInstance().login 登录接口生成新的 Ticket。
  ERR_SVR_SSO_A2_UP_INVALID(-10003),

  /// 票据验证没通过或者被安全打击。请重新调用 V2TIMManager.getInstance().login 登录接口生成新的票据。
  ERR_SVR_SSO_A2_DOWN_INVALID(-10004),

  /// 不允许空 Key。
  ERR_SVR_SSO_EMPTY_KEY(-10005),

  /// Key 中的账号和请求包头的账号不匹配。
  ERR_SVR_SSO_UIN_INVALID(-10006),

  /// 验证码下发超时。
  ERR_SVR_SSO_VCODE_TIMEOUT(-10007),

  /// 需要带上 Key 和 Ticket。
  ERR_SVR_SSO_NO_IMEI_AND_A2(-10008),

  /// Cookie 检查不匹配。
  ERR_SVR_SSO_COOKIE_INVALID(-10009),

  /// 下发提示语时 Key 过期。Key 是根据 UserSig 生成的内部票据，Key 的有效期小于或等于 UserSig 的有效期。请重新调用 V2TIMManager.getInstance().login 登录接口生成新的 Key。
  ERR_SVR_SSO_DOWN_TIP(-10101),

  /// 网络连接断开。
  ERR_SVR_SSO_DISCONNECT(-10102),

  /// 失效身份。
  ERR_SVR_SSO_IDENTIFIER_INVALID(-10103),

  /// 终端自动退出。
  ERR_SVR_SSO_CLIENT_CLOSE(-10104),

  /// MSFSDK 自动退出。
  ERR_SVR_SSO_MSFSDK_QUIT(-10105),

  /// 解密失败次数超过阈值，通知终端需要重置，请重新调用 TIMManager.getInstance().login 登录接口生成新的 Key。
  ERR_SVR_SSO_D2KEY_WRONG(-10106),

  /// 不支持聚合，给终端返回统一的错误码。终端在该 TCP 长连接上停止聚合。
  ERR_SVR_SSO_UNSURPPORT(-10107),

  /// 预付费欠费。
  ERR_SVR_SSO_PREPAID_ARREARS(-10108),

  /// 请求包格式错误。
  ERR_SVR_SSO_PACKET_WRONG(-10109),

  /// SDKAppID 黑名单。
  ERR_SVR_SSO_APPID_BLACK_LIST(-10110),

  /// SDKAppID 设置 service cmd 黑名单。
  ERR_SVR_SSO_CMD_BLACK_LIST(-10111),

  /// SDKAppID 停用。
  ERR_SVR_SSO_APPID_WITHOUT_USING(-10112),

  /// 频率限制(用户)，频率限制是设置针对某一个协议的每秒请求数的限制。
  ERR_SVR_SSO_FREQ_LIMIT(-10113),

  /// 过载丢包(系统)，连接的服务端处理过多请求，处理不过来，拒绝服务。
  ERR_SVR_SSO_OVERLOAD(-10114),

  /// 终端访问接口超频。
  ERR_SVR_SSO_FREQUENCY_LIMIT(-20009),

  /// 要发送的资源文件不存在。
  ERR_SVR_RES_NOT_FOUND(114000),

  /// 要发送的资源文件不允许访问。
  ERR_SVR_RES_ACCESS_DENY(114001),

  /// 文件大小超过限制。
  ERR_SVR_RES_SIZE_LIMIT(114002),

  /// 用户取消发送，如发送过程中登出等原因。
  ERR_SVR_RES_SEND_CANCEL(114003),

  /// 读取文件内容失败。
  ERR_SVR_RES_READ_FAILED(114004),

  /// 资源文件（如图片、文件、语音、视频）传输超时，一般是网络问题导致。
  ERR_SVR_RES_TRANSFER_TIMEOUT(114005),

  /// 参数非法。
  ERR_SVR_RES_INVALID_PARAMETERS(114011),

  /// 文件 MD5 校验失败。
  ERR_SVR_RES_INVALID_FILE_MD5(115066),

  /// 分片 MD5 校验失败。
  ERR_SVR_RES_INVALID_PART_MD5(115068),

  /// HTTP 解析错误 ，请检查 HTTP 请求 URL 格式。
  ERR_SVR_COMM_INVALID_HTTP_URL(60002),

  /// HTTP 请求 JSON 解析错误，请检查 JSON 格式。
  ERR_SVR_COMM_REQ_JSON_PARSE_FAILED(60003),

  /// 请求 URI 或 JSON 包体中 Identifier 或 UserSig 错误。
  ERR_SVR_COMM_INVALID_ACCOUNT(60004),

  /// 请求 URI 或 JSON 包体中 Identifier 或 UserSig 错误。
  ERR_SVR_COMM_INVALID_ACCOUNT_EX(60005),

  /// SDKAppID 失效，请核对 SDKAppID 有效性。
  ERR_SVR_COMM_INVALID_SDKAPPID(60006),

  /// REST 接口调用频率超过限制，请降低请求频率。
  ERR_SVR_COMM_REST_FREQ_LIMIT(60007),

  /// 服务请求超时或 HTTP 请求格式错误，请检查并重试。
  ERR_SVR_COMM_REQUEST_TIMEOUT(60008),

  /// 请求资源错误，请检查请求 URL。
  ERR_SVR_COMM_INVALID_RES(60009),

  /// REST API 请求的 Identifier 字段请填写 App 管理员账号。
  ERR_SVR_COMM_ID_NOT_ADMIN(60010),

  /// SDKAppID 请求频率超限，请降低请求频率。
  ERR_SVR_COMM_SDKAPPID_FREQ_LIMIT(60011),

  /// REST 接口需要带 SDKAppID，请检查请求 URL 中的 SDKAppID。
  ERR_SVR_COMM_SDKAPPID_MISS(60012),

  /// HTTP 响应包 JSON 解析错误。
  ERR_SVR_COMM_RSP_JSON_PARSE_FAILED(60013),

  /// 置换账号超时。
  ERR_SVR_COMM_EXCHANGE_ACCOUNT_TIMEUT(60014),

  /// 请求包体 Identifier 类型错误，请确认 Identifier 为字符串格式。
  ERR_SVR_COMM_INVALID_ID_FORMAT(60015),

  /// SDKAppID 被禁用，请 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 联系客服确认。
  ERR_SVR_COMM_SDKAPPID_FORBIDDEN(60016),

  /// 请求被禁用，请 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 联系客服确认。
  ERR_SVR_COMM_REQ_FORBIDDEN(60017),

  /// 请求过于频繁，请稍后重试。
  ERR_SVR_COMM_REQ_FREQ_LIMIT(60018),

  /// 请求过于频繁，请稍后重试。
  ERR_SVR_COMM_REQ_FREQ_LIMIT_EX(60019),

  /// 未购买套餐包或购买的套餐包正在配置中暂未生效，请五分钟后再次尝试。
  ERR_SVR_COMM_INVALID_SERVICE(60020),

  /// 文本安全打击，文本中可能包含敏感词汇。
  ERR_SVR_COMM_SENSITIVE_TEXT(80001),

  /// 发消息包体过长，目前支持最大12k消息包体长度，请减少包体大小重试。
  ERR_SVR_COMM_BODY_SIZE_LIMIT(80002),

  /// 图片安全打击，图片中可能包含敏感内容。
  ERR_SVR_COMM_SENSITIVE_IMAGE(80004),

  /// UserSig 已过期，请重新生成 UserSig，建议 UserSig 有效期不小于24小时。
  ERR_SVR_ACCOUNT_USERSIG_EXPIRED(70001),

  /// UserSig 长度为0，请检查传入的 UserSig 是否正确。
  ERR_SVR_ACCOUNT_USERSIG_EMPTY(70002),

  /// UserSig 校验失败，请确认下 UserSig 内容是否被截断，如缓冲区长度不够导致的内容截断。
  ERR_SVR_ACCOUNT_USERSIG_CHECK_FAILED(70003),

  /// UserSig 校验失败，可用工具自行验证生成的 UserSig 是否正确。
  ERR_SVR_ACCOUNT_USERSIG_CHECK_FAILED_EX(70005),

  /// 用公钥验证 UserSig 失败，请确认生成的 UserSig 使用的私钥和 SDKAppID 是否对应。
  ERR_SVR_ACCOUNT_USERSIG_MISMATCH_PUBLICKEY(70009),

  /// 请求的 Identifier 与生成 UserSig 的 Identifier 不匹配。
  ERR_SVR_ACCOUNT_USERSIG_MISMATCH_ID(70013),

  /// 请求的 SDKAppID 与生成 UserSig 的 SDKAppID 不匹配。
  ERR_SVR_ACCOUNT_USERSIG_MISMATCH_SDKAPPID(70014),

  /// 验证 UserSig 时公钥不存在。请先登录控制台下载私钥，下载私钥的具体方法可参考 [下载签名用的私钥](https://cloud.tencent.com/document/product/269/32688#.E4.B8.8B.E8.BD.BD.E7.AD.BE.E5.90.8D.E7.94.A8.E7.9A.84.E7.A7.81.E9.92.A5) 。
  ERR_SVR_ACCOUNT_USERSIG_PUBLICKEY_NOT_FOUND(70016),

  /// SDKAppID 未找到，请在云通信 IM 控制台确认应用信息。
  ERR_SVR_ACCOUNT_SDKAPPID_NOT_FOUND(70020),

  /// UserSig 已经失效，请重新生成，再次尝试。
  ERR_SVR_ACCOUNT_INVALID_USERSIG(70052),

  /// 请求的用户账号不存在。
  ERR_SVR_ACCOUNT_NOT_FOUND(70107),

  /// 安全原因被限制。
  ERR_SVR_ACCOUNT_SEC_RSTR(70114),

  /// 服务端内部超时，请重试。
  ERR_SVR_ACCOUNT_INTERNAL_TIMEOUT(70169),

  /// 请求中批量数量不合法。
  ERR_SVR_ACCOUNT_INVALID_COUNT(70206),

  /// 参数非法，请检查必填字段是否填充，或者字段的填充是否满足协议要求。
  ERR_SVR_ACCOUNT_INVALID_PARAMETERS(70402),

  /// 请求需要 App 管理员权限。
  ERR_SVR_ACCOUNT_ADMIN_REQUIRED(70403),

  /// 因失败且重试次数过多导致被限制，请检查 UserSig 是否正确，一分钟之后再试。
  ERR_SVR_ACCOUNT_FREQ_LIMIT(70050),

  /// 账号被拉入黑名单。
  ERR_SVR_ACCOUNT_BLACKLIST(70051),

  /// 创建账号数量超过免费体验版数量限制，请升级为专业版。
  ERR_SVR_ACCOUNT_COUNT_LIMIT(70398),

  /// 服务端内部错误，请重试。
  ERR_SVR_ACCOUNT_INTERNAL_ERROR(70500),

  /// 用户状态能力需要登录 IM 控制台开启
  ERR_SVR_ACCOUNT_USER_STATUS_DISABLED(72001),

  /// 请求参数错误，请根据错误描述检查请求是否正确。
  ERR_SVR_PROFILE_INVALID_PARAMETERS(40001),

  /// 请求参数错误，没有指定需要拉取资料的用户账号。
  ERR_SVR_PROFILE_ACCOUNT_MISS(40002),

  /// 请求的用户账号不存在。
  ERR_SVR_PROFILE_ACCOUNT_NOT_FOUND(40003),

  /// 请求需要 App 管理员权限。
  ERR_SVR_PROFILE_ADMIN_REQUIRED(40004),

  /// 资料字段中包含敏感词。
  ERR_SVR_PROFILE_SENSITIVE_TEXT(40005),

  /// 服务端内部错误，请稍后重试。
  ERR_SVR_PROFILE_INTERNAL_ERROR(40006),

  /// 没有资料字段的读权限，详情可参见 [资料字段](https://cloud.tencent.com/document/product/269/1500#.E8.B5.84.E6.96.99.E5.AD.97.E6.AE.B5) 。
  ERR_SVR_PROFILE_READ_PERMISSION_REQUIRED(40007),

  /// 没有资料字段的写权限，详情可参见 [资料字段](https://cloud.tencent.com/document/product/269/1500#.E8.B5.84.E6.96.99.E5.AD.97.E6.AE.B5) 。
  ERR_SVR_PROFILE_WRITE_PERMISSION_REQUIRED(40008),

  /// 资料字段的 Tag 不存在。
  ERR_SVR_PROFILE_TAG_NOT_FOUND(40009),

  /// 资料字段的 Value 长度超过500字节。
  ERR_SVR_PROFILE_SIZE_LIMIT(40601),

  /// 标配资料字段的 Value 错误，详情可参见 [标配资料字段](https://cloud.tencent.com/doc/product/269/1500#.E6.A0.87.E9.85.8D.E8.B5.84.E6.96.99.E5.AD.97.E6.AE.B5) 。
  ERR_SVR_PROFILE_VALUE_ERROR(40605),

  /// 资料字段的 Value 类型不匹配，详情可参见 [标配资料字段](https://cloud.tencent.com/doc/product/269/1500#.E6.A0.87.E9.85.8D.E8.B5.84.E6.96.99.E5.AD.97.E6.AE.B5) 。
  ERR_SVR_PROFILE_INVALID_VALUE_FORMAT(40610),

  /// 用户资料变更订阅能力未开启，请参见 [订阅非好友用户资料](https://cloud.tencent.com/document/product/269/75416#53edea52-35ef-4d82-aae9-941ba690f051)，登录 [IM 控制台](https://console.tencentcloud.com/im) 开启该功能。
  ERR_SVR_PROFILE_SUBSCRIPTION_DISABLED(72012),

  /// 请求参数错误，请根据错误描述检查请求是否正确。
  ERR_SVR_FRIENDSHIP_INVALID_PARAMETERS(30001),

  /// SDKAppID 不匹配。
  ERR_SVR_FRIENDSHIP_INVALID_SDKAPPID(30002),

  /// 请求的用户账号不存在。
  ERR_SVR_FRIENDSHIP_ACCOUNT_NOT_FOUND(30003),

  /// 请求需要 App 管理员权限。
  ERR_SVR_FRIENDSHIP_ADMIN_REQUIRED(30004),

  /// 关系链字段中包含敏感词。
  ERR_SVR_FRIENDSHIP_SENSITIVE_TEXT(30005),

  /// 服务端内部错误，请重试。
  ERR_SVR_FRIENDSHIP_INTERNAL_ERROR(30006),

  /// 网络超时，请稍后重试。
  ERR_SVR_FRIENDSHIP_NET_TIMEOUT(30007),

  /// 并发写导致写冲突，建议使用批量方式。
  ERR_SVR_FRIENDSHIP_WRITE_CONFLICT(30008),

  /// 后台禁止该用户发起加好友请求。
  ERR_SVR_FRIENDSHIP_ADD_FRIEND_DENY(30009),

  /// 自己的好友数已达系统上限。
  ERR_SVR_FRIENDSHIP_COUNT_LIMIT(30010),

  /// 分组已达系统上限。
  ERR_SVR_FRIENDSHIP_GROUP_COUNT_LIMIT(30011),

  /// 未决数已达系统上限。
  ERR_SVR_FRIENDSHIP_PENDENCY_LIMIT(30012),

  /// 黑名单数已达系统上限。
  ERR_SVR_FRIENDSHIP_BLACKLIST_LIMIT(30013),

  /// 对方的好友数已达系统上限。
  ERR_SVR_FRIENDSHIP_PEER_FRIEND_LIMIT(30014),

  /// 已经存在好友关系。
  ERR_SVR_FRIENDSHIP_ALREADY_FRIENDS(30015),

  /// 请求添加好友时，对方在自己的黑名单中，不允许加好友。
  ERR_SVR_FRIENDSHIP_IN_SELF_BLACKLIST(30515),

  /// 请求添加好友时，对方的加好友验证方式是不允许任何人添加自己为好友。
  ERR_SVR_FRIENDSHIP_ALLOW_TYPE_DENY_ANY(30516),

  /// 请求添加好友时，自己在对方的黑名单中，不允许加好友。
  ERR_SVR_FRIENDSHIP_IN_PEER_BLACKLIST(30525),

  /// A 请求加 B 为好友，B 的加好友验证方式被设置为“AllowType_Type_NeedConfirm”，这时 A 与 B 之间只能形成未决关系，该返回码用于标识加未决成功，以便与加好友成功的返回码区分开，调用方可以捕捉该错误给用户一个合理的提示。
  ERR_SVR_FRIENDSHIP_ALLOW_TYPE_NEED_CONFIRM(30539),

  /// 添加好友请求被安全策略打击，请勿频繁发起添加好友请求。
  ERR_SVR_FRIENDSHIP_ADD_FRIEND_SEC_RSTR(30540),

  /// 请求的未决不存在。
  ERR_SVR_FRIENDSHIP_PENDENCY_NOT_FOUND(30614),

  /// 与请求删除的账号之间不存在好友关系。
  ERR_SVR_FRIENDSHIP_DEL_NONFRIEND(31704),

  /// 删除好友请求被安全策略打击，请勿频繁发起删除好友请求。
  ERR_SVR_FRIENDSHIP_DEL_FRIEND_SEC_RSTR(31707),

  /// 请求的用户账号不存在。
  ERR_SVR_FRIENDSHIP_ACCOUNT_NOT_FOUND_EX(31804),

  /// 自己的关注数量到达上限。
  ERR_SVR_FRIENDSHIP_SELF_FOLLOWING_COUNT_EXCEEDS_LIMIT(32100),

  /// 对方的粉丝数量到达上限。
  ERR_SVR_FRIENDSHIP_PEER_FOLLOWERS_COUNT_EXCEEDS_LIMIT(32101),

  /// 自己的互关数量到达上限。
  ERR_SVR_FRIENDSHIP_SELF_MUTUAL_FOLLOWERS_COUNT_EXCEEDS_LIMIT(32102),

  /// 对方的互关数量到达上限。
  ERR_SVR_FRIENDSHIP_PEER_MUTUAL_FOLLOWERS_COUNT_EXCEEDS_LIMIT(32103),

  /// 请求的用户账号不存在。
  ERR_SVR_CONV_ACCOUNT_NOT_FOUND(50001),

  /// 请求参数错误，请根据错误描述检查请求是否正确。
  ERR_SVR_CONV_INVALID_PARAMETERS(50002),

  /// 请求需要 App 管理员权限。
  ERR_SVR_CONV_ADMIN_REQUIRED(50003),

  /// 服务端内部错误，请重试。
  ERR_SVR_CONV_INTERNAL_ERROR(50004),

  /// 网络超时，请稍后重试。
  ERR_SVR_CONV_NET_TIMEOUT(50005),

  /// 一次标记、分组、设置自定义数据的会话数超过了上限（最大支持 100 个）
  ERR_SVR_CONV_CONV_MARK_REQ_COUNT_EXCEED_LIMIT(51006),

  /// Group 会话操作异常，Server 内部错误或 Group 已经解散
  ERR_SVR_CONV_CONV_MARK_OPERATE_FAILED(51007),

  /// 标记、分组、设置自定义数据的总会话数超过了上限（最大支持 1000 个）
  ERR_SVR_CONV_CONV_MARK_TOTAL_COUNT_EXCEED_LIMIT(51008),

  /// 会话分组不存在
  ERR_SVR_CONV_CONV_GROUP_NOT_EXIST(51009),

  /// 会话分组数超过了上限（最大支持 20 个）
  ERR_SVR_CONV_CONV_GROUP_TOTAL_COUNT_EXCEED_LIMIT(51010),

  /// 会话分组名字节数超过了上限（最大支持 32 字节）
  ERR_SVR_CONV_CONV_GROUP_NAME_EXCEED_LENGTH(51011),

  /// 请求包非法，请检查发送方和接收方账号是否存在。
  ERR_SVR_MSG_PKG_PARSE_FAILED(20001),

  /// 内部鉴权失败。
  ERR_SVR_MSG_INTERNAL_AUTH_FAILED(20002),

  /// Identifier 无效或者 Identifier 未导入云通信 IM。
  ERR_SVR_MSG_INVALID_ID(20003),

  /// 网络异常，请重试。
  ERR_SVR_MSG_NET_ERROR(20004),

  /// 服务端内部错误，请重试。
  ERR_SVR_MSG_INTERNAL_ERROR1(20005),

  /// 触发发送单聊消息之前回调，App 后台返回禁止下发该消息。
  ERR_SVR_MSG_PUSH_DENY(20006),

  /// 发送单聊消息，被对方拉黑，禁止发送。
  ERR_SVR_MSG_IN_PEER_BLACKLIST(20007),

  /// 消息发送双方互相不是好友，禁止发送（配置单聊消息校验好友关系才会出现）。
  ERR_SVR_MSG_BOTH_NOT_FRIEND(20009),

  /// 发送单聊消息，自己不是对方的好友（单向关系），禁止发送。
  ERR_SVR_MSG_NOT_PEER_FRIEND(20010),

  /// 发送单聊消息，对方不是自己的好友（单向关系），禁止发送。
  ERR_SVR_MSG_NOT_SELF_FRIEND(20011),

  /// 因禁言，禁止发送消息。
  ERR_SVR_MSG_SHUTUP_DENY(20012),

  /// 消息撤回超过了时间限制（默认2分钟）。
  ERR_SVR_MSG_REVOKE_TIME_LIMIT(20016),

  /// 删除漫游内部错误。
  ERR_SVR_MSG_DEL_RAMBLE_INTERNAL_ERROR(20018),

  /// 消息扩展操作冲突。
  ERR_SVR_MSG_EXTENSION_CONFLICT(23001),

  /// 删除的消息扩展不存在。
  ERR_SVR_MSG_EXTENSION_NOT_EXIST(23004),

  /// 单条消息 Reaction 数量超过最大限制。
  ERR_SVR_MSG_REACTION_COUNT_LIMIT(23005),

  /// 单个 Reaction 用户数量超过最大限制。
  ERR_SVR_MSG_REACTION_USER_COUNT_LIMIT(23006),

  /// Reaction 已经包含当前操作用户。
  ERR_SVR_MSG_REACTION_ALREADY_CONTAIN_USER(23007),

  /// Reaction 不存在。
  ERR_SVR_MSG_REACTION_NOT_EXISTS(23008),

  /// Reaction 不包含当前操作用户。
  ERR_SVR_MSG_REACTION_NOT_CONTAIN_USER(23009),

  /// JSON 格式解析失败，请检查请求包是否符合 JSON 规范。
  ERR_SVR_MSG_JSON_PARSE_FAILED(90001),

  /// JSON 格式请求包中 MsgBody 不符合消息格式描述，或者 MsgBody 不是 Array 类型，请参考 [TIMMsgElement 对象](https://cloud.tencent.com/document/product/269/2720#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0timmsgelement) 的定义。
  ERR_SVR_MSG_INVALID_JSON_BODY_FORMAT(90002),

  /// JSON 格式请求包体中缺少 To_Account 字段或者 To_Account 字段不是 Integer 类型
  ERR_SVR_MSG_INVALID_TO_ACCOUNT(90003),

  /// JSON 格式请求包体中缺少 MsgRandom 字段或者 MsgRandom 字段不是 Integer 类型
  ERR_SVR_MSG_INVALID_RAND(90005),

  /// JSON 格式请求包体中缺少 MsgTimeStamp 字段或者 MsgTimeStamp 字段不是 Integer 类型
  ERR_SVR_MSG_INVALID_TIMESTAMP(90006),

  /// JSON 格式请求包体中 MsgBody 类型不是 Array 类型，请将其修改为 Array 类型
  ERR_SVR_MSG_BODY_NOT_ARRAY(90007),

  /// 请求需要 App 管理员权限。
  ERR_SVR_MSG_ADMIN_REQUIRED(90009),

  /// JSON 格式请求包不符合消息格式描述，请参考 [TIMMsgElement 对象](https://cloud.tencent.com/document/product/269/2720#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0timmsgelement) 的定义。
  ERR_SVR_MSG_INVALID_JSON_FORMAT(90010),

  /// 批量发消息目标账号超过500，请减少 To_Account 中目标账号数量。
  ERR_SVR_MSG_TO_ACCOUNT_COUNT_LIMIT(90011),

  /// To_Account 没有注册或不存在，请确认 To_Account 是否导入云通信 IM 或者是否拼写错误。
  ERR_SVR_MSG_TO_ACCOUNT_NOT_FOUND(90012),

  /// 消息离线存储时间错误（最多不能超过7天）。
  ERR_SVR_MSG_TIME_LIMIT(90026),

  /// JSON 格式请求包体中 SyncOtherMachine 字段不是 Integer 类型
  ERR_SVR_MSG_INVALID_SYNCOTHERMACHINE(90031),

  /// JSON 格式请求包体中 MsgLifeTime 字段不是 Integer 类型
  ERR_SVR_MSG_INVALID_MSGLIFETIME(90044),

  /// 请求的用户账号不存在。
  ERR_SVR_MSG_ACCOUNT_NOT_FOUND(90048),

  /// 服务内部错误，请重试。
  ERR_SVR_MSG_INTERNAL_ERROR2(90994),

  /// 服务内部错误，请重试。
  ERR_SVR_MSG_INTERNAL_ERROR3(90995),

  /// 服务内部错误，请重试。
  ERR_SVR_MSG_INTERNAL_ERROR4(91000),

  /// 服务内部错误，请重试；如果所有请求都返回该错误码，且 App 配置了第三方回调，请检查 App 服务端是否正常向云通信 IM 后台服务端返回回调结果。
  ERR_SVR_MSG_INTERNAL_ERROR5(90992),

  /// JSON 数据包超长，消息包体请不要超过12k。
  ERR_SVR_MSG_BODY_SIZE_LIMIT(93000),

  /// Web 端长轮询被踢（Web 端同时在线实例个数超出限制）。
  ERR_SVR_MSG_LONGPOLLING_COUNT_LIMIT(91101),

  /// 服务端内部错误，请重试。
  ERR_SVR_GROUP_INTERNAL_ERROR(10002),

  /// 请求中的接口名称错误，请核对接口名称并重试。
  ERR_SVR_GROUP_API_NAME_ERROR(10003),

  /// 参数非法，请根据错误描述检查请求是否正确。
  ERR_SVR_GROUP_INVALID_PARAMETERS(10004),

  /// 请求包体中携带的账号数量过多。
  ERR_SVR_GROUP_ACOUNT_COUNT_LIMIT(10005),

  /// 操作频率限制，请尝试降低调用的频率。
  ERR_SVR_GROUP_FREQ_LIMIT(10006),

  /// 操作权限不足，比如 Public 群组中普通成员尝试执行踢人操作，但只有 App 管理员才有权限。
  ERR_SVR_GROUP_PERMISSION_DENY(10007),

  /// 请求非法，可能是请求中携带的签名信息验证不正确，请再次尝试或 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 联系技术客服。
  ERR_SVR_GROUP_INVALID_REQ(10008),

  /// 该群不允许群主主动退出。
  ERR_SVR_GROUP_SUPER_NOT_ALLOW_QUIT(10009),

  /// 群组不存在，或者曾经存在过，但是目前已经被解散。
  ERR_SVR_GROUP_NOT_FOUND(10010),

  /// 解析 JSON 包体失败，请检查包体的格式是否符合 JSON 格式。
  ERR_SVR_GROUP_JSON_PARSE_FAILED(10011),

  /// 发起操作的 Identifier 非法，请检查发起操作的用户 Identifier 是否填写正确。
  ERR_SVR_GROUP_INVALID_ID(10012),

  /// 被邀请加入的用户已经是群成员。
  ERR_SVR_GROUP_ALLREADY_MEMBER(10013),

  /// 群已满员，无法将请求中的用户加入群组，如果是批量加人，可以尝试减少加入用户的数量。
  ERR_SVR_GROUP_FULL_MEMBER_COUNT(10014),

  /// 群组 ID 非法，请检查群组 ID 是否填写正确。
  ERR_SVR_GROUP_INVALID_GROUPID(10015),

  /// App 后台通过第三方回调拒绝本次操作。
  ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY(10016),

  /// 因被禁言而不能发送消息，请检查发送者是否被设置禁言。
  ERR_SVR_GROUP_SHUTUP_DENY(10017),

  /// 应答包长度超过最大包长（1MB），请求的内容过多，请尝试减少单次请求的数据量。
  ERR_SVR_GROUP_RSP_SIZE_LIMIT(10018),

  /// 请求的用户账号不存在。
  ERR_SVR_GROUP_ACCOUNT_NOT_FOUND(10019),

  /// 群组 ID 已被使用，请选择其他的群组 ID。
  ERR_SVR_GROUP_GROUPID_IN_USED(10021),

  /// 发消息的频率超限，请延长两次发消息时间的间隔。
  ERR_SVR_GROUP_SEND_MSG_FREQ_LIMIT(10023),

  /// 此邀请或者申请请求已经被处理。
  ERR_SVR_GROUP_REQ_ALLREADY_BEEN_PROCESSED(10024),

  /// 群组 ID 已被使用，并且操作者为群主，可以直接使用。
  ERR_SVR_GROUP_GROUPID_IN_USED_FOR_SUPER(10025),

  /// 该 SDKAppID 请求的命令字已被禁用，请 [提交工单](https://console.cloud.tencent.com/workorder/category?level1_id=29&level2_id=40&source=0&data_title=%E4%BA%91%E9%80%9A%E4%BF%A1%20%20IM&step=1) 联系客服。
  ERR_SVR_GROUP_SDKAPPID_DENY(10026),

  /// 请求撤回的消息不存在。
  ERR_SVR_GROUP_REVOKE_MSG_NOT_FOUND(10030),

  /// 消息撤回超过了时间限制（默认2分钟）。
  ERR_SVR_GROUP_REVOKE_MSG_TIME_LIMIT(10031),

  /// 请求撤回的消息不支持撤回操作。
  ERR_SVR_GROUP_REVOKE_MSG_DENY(10032),

  /// 群组类型不支持消息撤回操作。
  ERR_SVR_GROUP_NOT_ALLOW_REVOKE_MSG(10033),

  /// 该消息类型不支持删除操作。
  ERR_SVR_GROUP_REMOVE_MSG_DENY(10034),

  /// 音视频聊天室和在线成员广播大群不支持删除消息。
  ERR_SVR_GROUP_NOT_ALLOW_REMOVE_MSG(10035),

  /// 音视频聊天室创建数量超过了限制，请参考 [价格说明](https://cloud.tencent.com/document/product/269/11673) 购买预付费套餐“IM音视频聊天室”。
  ERR_SVR_GROUP_AVCHATROOM_COUNT_LIMIT(10036),

  /// 单个用户可创建和加入的群组数量超过了限制，请参考 [价格说明](https://cloud.tencent.com/document/product/269/11673) 购买或升级预付费套餐“单人可创建与加入群组数”。
  ERR_SVR_GROUP_COUNT_LIMIT(10037),

  /// 群成员数量超过限制，请参考 [价格说明](https://cloud.tencent.com/document/product/269/11673) 购买或升级预付费套餐“扩展群人数上限”。
  ERR_SVR_GROUP_MEMBER_COUNT_LIMIT(10038),

  /// 群属性写冲突，请先拉取最新的群属性后再尝试写操作，IMSDK  5.6 及其以上版本支持。
  ERR_SVR_GROUP_ATTRIBUTE_WRITE_CONFILCT(10056),

  /// 置顶消息超出数量限制时。
  ERR_SVR_GROUP_PINNED_MESSAGE_COUNT_LIMIT(10070),

  /// 消息已经被置顶。
  ERR_SVR_GROUP_MESSAGE_ALREADY_PINNED(10071),

  /// 批量操作无成功结果。
  ERR_NO_SUCC_RESULT(6003),

  /// 无效接收方。
  ERR_TO_USER_INVALID(6011),

  /// 请求超时。
  ERR_REQUEST_TIME_OUT(6012),

  /// INIT CORE 模块失败。
  ERR_INIT_CORE_FAIL(6018),

  /// SessionNode 为 null 。
  ERR_EXPIRED_SESSION_NODE(6020),

  /// 在登录完成前进行了登出（在登录时返回）。
  ERR_LOGGED_OUT_BEFORE_LOGIN_FINISHED(6023),

  /// TLS SDK 未初始化。
  ERR_TLSSDK_NOT_INITIALIZED(6024),

  /// TLS SDK 没有找到相应的用户信息。
  ERR_TLSSDK_USER_NOT_FOUND(6025),

  /// QALSDK 未知原因BIND失败。
  ERR_BIND_FAIL_UNKNOWN(6100),

  /// 缺少 SSO 票据。
  ERR_BIND_FAIL_NO_SSOTICKET(6101),

  /// 重复 BIND。
  ERR_BIND_FAIL_REPEATD_BIND(6102),

  /// TinyId 为空。
  ERR_BIND_FAIL_TINYID_NULL(6103),

  /// GUID 为空。
  ERR_BIND_FAIL_GUID_NULL(6104),

  /// 解注册包失败。
  ERR_BIND_FAIL_UNPACK_REGPACK_FAILED(6105),

  /// 注册超时。
  ERR_BIND_FAIL_REG_TIMEOUT(6106),

  /// 正在 BIND 操作中。
  ERR_BIND_FAIL_ISBINDING(6107),

  /// 发包未知错误。
  ERR_PACKET_FAIL_UNKNOWN(6120),

  /// 发送请求包时没有网络。
  ERR_PACKET_FAIL_REQ_NO_NET(6121),

  /// 发送回复包时没有网络。
  ERR_PACKET_FAIL_RESP_NO_NET(6122),

  /// 发送请求包时没有权限。
  ERR_PACKET_FAIL_REQ_NO_AUTH(6123),

  /// SSO 错误。
  ERR_PACKET_FAIL_SSO_ERR(6124),

  /// 请求超时。
  ERR_PACKET_FAIL_REQ_TIMEOUT(6125),

  /// 回复超时。
  ERR_PACKET_FAIL_RESP_TIMEOUT(6126),

  /// 重发失败。
  ERR_PACKET_FAIL_REQ_ON_RESEND(6127),

  /// 重发时没有真正发送。
  ERR_PACKET_FAIL_RESP_NO_RESEND(6128),

  /// 保存被过滤。
  ERR_PACKET_FAIL_FLOW_SAVE_FILTERED(6129),

  /// 发送过载。
  ERR_PACKET_FAIL_REQ_OVER_LOAD(6130),

  /// 数据逻辑错误。
  ERR_PACKET_FAIL_LOGIC_ERR(6131),

  /// proxy_manager 没有完成服务端数据同步。
  ERR_FRIENDSHIP_PROXY_NOT_SYNCED(6150),

  /// proxy_manager 正在进行服务端数据同步。
  ERR_FRIENDSHIP_PROXY_SYNCING(6151),

  /// proxy_manager 同步失败。
  ERR_FRIENDSHIP_PROXY_SYNCED_FAIL(6152),

  /// proxy_manager 请求参数，在本地检查不合法。
  ERR_FRIENDSHIP_PROXY_LOCAL_CHECK_ERR(6153),

  /// Group assistant 请求字段中包含非预设字段。
  ERR_GROUP_INVALID_FIELD(6160),

  /// Group assistant 群资料本地存储没有开启。
  ERR_GROUP_STORAGE_DISABLED(6161),

  /// 加载群资料失败。
  ERR_LOADGRPINFO_FAILED(6162),

  /// 请求的时候没有网络。
  ERR_REQ_NO_NET_ON_REQ(6200),

  /// 响应的时候没有网络。
  ERR_REQ_NO_NET_ON_RSP(6201),

  /// QALSDK 服务未就绪。
  ERR_SERIVCE_NOT_READY(6205),

  /// 账号认证失败（ TinyId 转换失败）。
  ERR_LOGIN_AUTH_FAILED(6207),

  /// 在应用启动后没有尝试联网。
  ERR_NEVER_CONNECT_AFTER_LAUNCH(6209),

  /// QALSDK 执行失败。
  ERR_REQ_FAILED(6210),

  /// 请求非法，toMsgService 非法。
  ERR_REQ_INVALID_REQ(6211),

  /// 请求队列满。
  ERR_REQ_OVERLOADED(6212),

  /// 已经被其他终端踢了。
  ERR_REQ_KICK_OFF(6213),

  /// 服务被暂停。
  ERR_REQ_SERVICE_SUSPEND(6214),

  /// SSO 签名错误。
  ERR_REQ_INVALID_SIGN(6215),

  /// SSO cookie 无效。
  ERR_REQ_INVALID_COOKIE(6216),

  /// 登录时 TLS SDK 回包校验，包体长度错误。
  ERR_LOGIN_TLS_RSP_PARSE_FAILED(6217),

  /// 登录时 OPENSTATSVC 向 OPENMSG 上报状态超时。
  ERR_LOGIN_OPENMSG_TIMEOUT(6218),

  /// 登录时 OPENSTATSVC 向 OPENMSG 上报状态时解析回包失败。
  ERR_LOGIN_OPENMSG_RSP_PARSE_FAILED(6219),

  /// 登录时 TLS SDK 解密失败。
  ERR_LOGIN_TLS_DECRYPT_FAILED(6220),

  /// WIFI 需要认证。
  ERR_WIFI_NEED_AUTH(6221),

  /// 用户已取消。
  ERR_USER_CANCELED(6222),

  /// 消息撤回超过了时间限制（默认2分钟）。
  ERR_REVOKE_TIME_LIMIT_EXCEED(6223),

  /// 缺少 UGC 扩展包。
  ERR_LACK_UGC_EXT(6224),

  /// 自动登录，本地票据过期，需要 UserSig 手动登录。
  ERR_AUTOLOGIN_NEED_USERSIG(6226),

  /// 没有可用的短连接 SSO 。
  ERR_QAL_NO_SHORT_CONN_AVAILABLE(6300),

  /// 消息内容安全打击。
  ERR_REQ_CONTENT_ATTACK(80101),

  /// 登录返回，票据过期。
  ERR_LOGIN_SIG_EXPIRE(70101),

  /// IM SDK 已经初始化无需重复初始化。
  ERR_SDK_HAD_INITIALIZED(90101),

  /// OpenBDH 错误码基。
  ERR_OPENBDH_BASE(115000),

  /// 请求时没有网络，请等网络恢复后重试。
  ERR_REQUEST_NO_NET_ONREQ(6250),

  /// 响应时没有网络，请等网络恢复后重试。
  ERR_REQUEST_NO_NET_ONRSP(6251),

  /// QALSDK 执行失败。
  ERR_REQUEST_FAILED(6252),

  /// 请求非法，toMsgService 非法。
  ERR_REQUEST_INVALID_REQ(6253),

  /// 请求队列満。
  ERR_REQUEST_OVERLOADED(6254),

  /// 已经被其他终端踢了。
  ERR_REQUEST_KICK_OFF(6255),

  /// 服务被暂停。
  ERR_REQUEST_SERVICE_SUSPEND(6256),

  /// SSO 签名错误。
  ERR_REQUEST_INVALID_SIGN(6257),

  /// SSO cookie 无效。
  ERR_REQUEST_INVALID_COOKIE(6258);

  final int value;
  const TIMErrCode(this.value);

  static TIMErrCode fromValue(int value) => switch (value) {
        0 => ERR_SUCC,
        6015 => ERR_IN_PROGESS,
        6017 => ERR_INVALID_PARAMETERS,
        6022 => ERR_IO_OPERATION_FAILED,
        6027 => ERR_INVALID_JSON,
        6028 => ERR_OUT_OF_MEMORY,
        6001 => ERR_PARSE_RESPONSE_FAILED,
        6002 => ERR_SERIALIZE_REQ_FAILED,
        6013 => ERR_SDK_NOT_INITIALIZED,
        6005 => ERR_LOADMSG_FAILED,
        6019 => ERR_DATABASE_OPERATE_FAILED,
        7001 => ERR_SDK_COMM_CROSS_THREAD,
        7002 => ERR_SDK_COMM_TINYID_EMPTY,
        7003 => ERR_SDK_COMM_INVALID_IDENTIFIER,
        7004 => ERR_SDK_COMM_FILE_NOT_FOUND,
        7005 => ERR_SDK_COMM_FILE_TOO_LARGE,
        7006 => ERR_SDK_COMM_FILE_SIZE_EMPTY,
        7007 => ERR_SDK_COMM_FILE_OPEN_FAILED,
        7008 => ERR_SDK_COMM_API_CALL_FREQUENCY_LIMIT,
        7009 => ERR_SDK_COMM_INTERRUPT,
        7010 => ERR_SDK_COMM_DATABASE_FAILURE,
        7011 => ERR_SDK_COMM_DATABASE_NOTFOUND,
        7012 => ERR_SDK_INTERNAL_ERROR,
        7013 => ERR_SDK_INTERFACE_NOT_SUPPORT,
        7014 => ERR_SDK_INVALID_OPERATION,
        6014 => ERR_SDK_NOT_LOGGED_IN,
        6026 => ERR_NO_PREVIOUS_LOGIN,
        6206 => ERR_USER_SIG_EXPIRED,
        6208 => ERR_LOGIN_KICKED_OFF_BY_OTHER,
        7501 => ERR_SDK_ACCOUNT_LOGIN_IN_PROCESS,
        7502 => ERR_SDK_ACCOUNT_LOGOUT_IN_PROCESS,
        7503 => ERR_SDK_ACCOUNT_TLS_INIT_FAILED,
        7504 => ERR_SDK_ACCOUNT_TLS_NOT_INITIALIZED,
        7505 => ERR_SDK_ACCOUNT_TLS_TRANSPKG_ERROR,
        7506 => ERR_SDK_ACCOUNT_TLS_DECRYPT_FAILED,
        7507 => ERR_SDK_ACCOUNT_TLS_REQUEST_FAILED,
        7508 => ERR_SDK_ACCOUNT_TLS_REQUEST_TIMEOUT,
        6004 => ERR_INVALID_CONVERSATION,
        6006 => ERR_FILE_TRANS_AUTH_FAILED,
        6007 => ERR_FILE_TRANS_NO_SERVER,
        6008 => ERR_FILE_TRANS_UPLOAD_FAILED,
        6031 => ERR_IMAGE_UPLOAD_FAILED_NOTIMAGE,
        6009 => ERR_FILE_TRANS_DOWNLOAD_FAILED,
        6010 => ERR_HTTP_REQ_FAILED,
        6016 => ERR_INVALID_MSG_ELEM,
        6021 => ERR_INVALID_SDK_OBJECT,
        6032 => ERR_INVALID_MSG_RECEIVER,
        8001 => ERR_SDK_MSG_BODY_SIZE_LIMIT,
        8002 => ERR_SDK_MSG_KEY_REQ_DIFFER_RSP,
        8003 => ERR_SDK_IMAGE_CONVERT_ERROR,
        8004 => ERR_SDK_IMAGE_CI_BLOCK,
        8005 => ERR_MERGER_MSG_LAYERS_OVER_LIMIT,
        8006 => ERR_SDK_MSG_MODIFY_CONFLICT,
        8010 => ERR_SDK_SIGNALING_INVALID_INVITE_ID,
        8011 => ERR_SDK_SIGNALING_NO_PERMISSION,
        8020 => ERR_SDK_INVALID_CANCEL_MESSAGE,
        8021 => ERR_SDK_SEND_MESSAGE_FAILED_WITH_CANCEL,
        8501 => ERR_SDK_GROUP_INVALID_ID,
        8502 => ERR_SDK_GROUP_INVALID_NAME,
        8503 => ERR_SDK_GROUP_INVALID_INTRODUCTION,
        8504 => ERR_SDK_GROUP_INVALID_NOTIFICATION,
        8505 => ERR_SDK_GROUP_INVALID_FACE_URL,
        8506 => ERR_SDK_GROUP_INVALID_NAME_CARD,
        8507 => ERR_SDK_GROUP_MEMBER_COUNT_LIMIT,
        8508 => ERR_SDK_GROUP_JOIN_PRIVATE_GROUP_DENY,
        8509 => ERR_SDK_GROUP_INVITE_SUPER_DENY,
        8510 => ERR_SDK_GROUP_INVITE_NO_MEMBER,
        8511 => ERR_SDK_GROUP_ATTR_FREQUENCY_LIMIT,
        8512 => ERR_SDK_GROUP_GET_ONLINE_MEMBER_COUNT_LIMIT,
        8513 => ERR_SDK_GROUP_GET_GROUPS_INFO_LIMIT,
        8514 => ERR_SDK_GROUP_GET_JOINED_GROUP_LIMIT,
        9001 => ERR_SDK_FRIENDSHIP_INVALID_PROFILE_KEY,
        9002 => ERR_SDK_FRIENDSHIP_INVALID_ADD_REMARK,
        9003 => ERR_SDK_FRIENDSHIP_INVALID_ADD_WORDING,
        9004 => ERR_SDK_FRIENDSHIP_INVALID_ADD_SOURCE,
        9005 => ERR_SDK_FRIENDSHIP_FRIEND_GROUP_EMPTY,
        9006 => ERR_SDK_FRIENDSHIP_EXCEED_THE_LIMIT,
        9501 => ERR_SDK_NET_ENCODE_FAILED,
        9502 => ERR_SDK_NET_DECODE_FAILED,
        9503 => ERR_SDK_NET_AUTH_INVALID,
        9504 => ERR_SDK_NET_COMPRESS_FAILED,
        9505 => ERR_SDK_NET_UNCOMPRESS_FAILED,
        9506 => ERR_SDK_NET_FREQ_LIMIT,
        9507 => ERR_SDK_NET_REQ_COUNT_LIMIT,
        9508 => ERR_SDK_NET_DISCONNECT,
        9509 => ERR_SDK_NET_ALLREADY_CONN,
        9510 => ERR_SDK_NET_CONN_TIMEOUT,
        9511 => ERR_SDK_NET_CONN_REFUSE,
        9512 => ERR_SDK_NET_NET_UNREACH,
        9513 => ERR_SDK_NET_SOCKET_NO_BUFF,
        9514 => ERR_SDK_NET_RESET_BY_PEER,
        9515 => ERR_SDK_NET_SOCKET_INVALID,
        9516 => ERR_SDK_NET_HOST_GETADDRINFO_FAILED,
        9517 => ERR_SDK_NET_CONNECT_RESET,
        9518 => ERR_SDK_NET_WAIT_INQUEUE_TIMEOUT,
        9519 => ERR_SDK_NET_WAIT_SEND_TIMEOUT,
        9520 => ERR_SDK_NET_WAIT_ACK_TIMEOUT,
        9521 => ERR_SDK_NET_WAIT_SEND_REMAINING_TIMEOUT,
        9522 => ERR_SDK_NET_PKG_SIZE_LIMIT,
        9523 => ERR_SDK_NET_WAIT_SEND_TIMEOUT_NO_NETWORK,
        9524 => ERR_SDK_NET_WAIT_ACK_TIMEOUT_NO_NETWORK,
        9525 => ERR_SDK_NET_SEND_REMAINING_TIMEOUT_NO_NETWORK,
        -302 => ERR_SVR_SSO_CONNECT_LIMIT,
        -10000 => ERR_SVR_SSO_VCODE,
        -10001 => ERR_SVR_SSO_D2_EXPIRED,
        -10003 => ERR_SVR_SSO_A2_UP_INVALID,
        -10004 => ERR_SVR_SSO_A2_DOWN_INVALID,
        -10005 => ERR_SVR_SSO_EMPTY_KEY,
        -10006 => ERR_SVR_SSO_UIN_INVALID,
        -10007 => ERR_SVR_SSO_VCODE_TIMEOUT,
        -10008 => ERR_SVR_SSO_NO_IMEI_AND_A2,
        -10009 => ERR_SVR_SSO_COOKIE_INVALID,
        -10101 => ERR_SVR_SSO_DOWN_TIP,
        -10102 => ERR_SVR_SSO_DISCONNECT,
        -10103 => ERR_SVR_SSO_IDENTIFIER_INVALID,
        -10104 => ERR_SVR_SSO_CLIENT_CLOSE,
        -10105 => ERR_SVR_SSO_MSFSDK_QUIT,
        -10106 => ERR_SVR_SSO_D2KEY_WRONG,
        -10107 => ERR_SVR_SSO_UNSURPPORT,
        -10108 => ERR_SVR_SSO_PREPAID_ARREARS,
        -10109 => ERR_SVR_SSO_PACKET_WRONG,
        -10110 => ERR_SVR_SSO_APPID_BLACK_LIST,
        -10111 => ERR_SVR_SSO_CMD_BLACK_LIST,
        -10112 => ERR_SVR_SSO_APPID_WITHOUT_USING,
        -10113 => ERR_SVR_SSO_FREQ_LIMIT,
        -10114 => ERR_SVR_SSO_OVERLOAD,
        -20009 => ERR_SVR_SSO_FREQUENCY_LIMIT,
        114000 => ERR_SVR_RES_NOT_FOUND,
        114001 => ERR_SVR_RES_ACCESS_DENY,
        114002 => ERR_SVR_RES_SIZE_LIMIT,
        114003 => ERR_SVR_RES_SEND_CANCEL,
        114004 => ERR_SVR_RES_READ_FAILED,
        114005 => ERR_SVR_RES_TRANSFER_TIMEOUT,
        114011 => ERR_SVR_RES_INVALID_PARAMETERS,
        115066 => ERR_SVR_RES_INVALID_FILE_MD5,
        115068 => ERR_SVR_RES_INVALID_PART_MD5,
        60002 => ERR_SVR_COMM_INVALID_HTTP_URL,
        60003 => ERR_SVR_COMM_REQ_JSON_PARSE_FAILED,
        60004 => ERR_SVR_COMM_INVALID_ACCOUNT,
        60005 => ERR_SVR_COMM_INVALID_ACCOUNT_EX,
        60006 => ERR_SVR_COMM_INVALID_SDKAPPID,
        60007 => ERR_SVR_COMM_REST_FREQ_LIMIT,
        60008 => ERR_SVR_COMM_REQUEST_TIMEOUT,
        60009 => ERR_SVR_COMM_INVALID_RES,
        60010 => ERR_SVR_COMM_ID_NOT_ADMIN,
        60011 => ERR_SVR_COMM_SDKAPPID_FREQ_LIMIT,
        60012 => ERR_SVR_COMM_SDKAPPID_MISS,
        60013 => ERR_SVR_COMM_RSP_JSON_PARSE_FAILED,
        60014 => ERR_SVR_COMM_EXCHANGE_ACCOUNT_TIMEUT,
        60015 => ERR_SVR_COMM_INVALID_ID_FORMAT,
        60016 => ERR_SVR_COMM_SDKAPPID_FORBIDDEN,
        60017 => ERR_SVR_COMM_REQ_FORBIDDEN,
        60018 => ERR_SVR_COMM_REQ_FREQ_LIMIT,
        60019 => ERR_SVR_COMM_REQ_FREQ_LIMIT_EX,
        60020 => ERR_SVR_COMM_INVALID_SERVICE,
        80001 => ERR_SVR_COMM_SENSITIVE_TEXT,
        80002 => ERR_SVR_COMM_BODY_SIZE_LIMIT,
        80004 => ERR_SVR_COMM_SENSITIVE_IMAGE,
        70001 => ERR_SVR_ACCOUNT_USERSIG_EXPIRED,
        70002 => ERR_SVR_ACCOUNT_USERSIG_EMPTY,
        70003 => ERR_SVR_ACCOUNT_USERSIG_CHECK_FAILED,
        70005 => ERR_SVR_ACCOUNT_USERSIG_CHECK_FAILED_EX,
        70009 => ERR_SVR_ACCOUNT_USERSIG_MISMATCH_PUBLICKEY,
        70013 => ERR_SVR_ACCOUNT_USERSIG_MISMATCH_ID,
        70014 => ERR_SVR_ACCOUNT_USERSIG_MISMATCH_SDKAPPID,
        70016 => ERR_SVR_ACCOUNT_USERSIG_PUBLICKEY_NOT_FOUND,
        70020 => ERR_SVR_ACCOUNT_SDKAPPID_NOT_FOUND,
        70052 => ERR_SVR_ACCOUNT_INVALID_USERSIG,
        70107 => ERR_SVR_ACCOUNT_NOT_FOUND,
        70114 => ERR_SVR_ACCOUNT_SEC_RSTR,
        70169 => ERR_SVR_ACCOUNT_INTERNAL_TIMEOUT,
        70206 => ERR_SVR_ACCOUNT_INVALID_COUNT,
        70402 => ERR_SVR_ACCOUNT_INVALID_PARAMETERS,
        70403 => ERR_SVR_ACCOUNT_ADMIN_REQUIRED,
        70050 => ERR_SVR_ACCOUNT_FREQ_LIMIT,
        70051 => ERR_SVR_ACCOUNT_BLACKLIST,
        70398 => ERR_SVR_ACCOUNT_COUNT_LIMIT,
        70500 => ERR_SVR_ACCOUNT_INTERNAL_ERROR,
        72001 => ERR_SVR_ACCOUNT_USER_STATUS_DISABLED,
        40001 => ERR_SVR_PROFILE_INVALID_PARAMETERS,
        40002 => ERR_SVR_PROFILE_ACCOUNT_MISS,
        40003 => ERR_SVR_PROFILE_ACCOUNT_NOT_FOUND,
        40004 => ERR_SVR_PROFILE_ADMIN_REQUIRED,
        40005 => ERR_SVR_PROFILE_SENSITIVE_TEXT,
        40006 => ERR_SVR_PROFILE_INTERNAL_ERROR,
        40007 => ERR_SVR_PROFILE_READ_PERMISSION_REQUIRED,
        40008 => ERR_SVR_PROFILE_WRITE_PERMISSION_REQUIRED,
        40009 => ERR_SVR_PROFILE_TAG_NOT_FOUND,
        40601 => ERR_SVR_PROFILE_SIZE_LIMIT,
        40605 => ERR_SVR_PROFILE_VALUE_ERROR,
        40610 => ERR_SVR_PROFILE_INVALID_VALUE_FORMAT,
        72012 => ERR_SVR_PROFILE_SUBSCRIPTION_DISABLED,
        30001 => ERR_SVR_FRIENDSHIP_INVALID_PARAMETERS,
        30002 => ERR_SVR_FRIENDSHIP_INVALID_SDKAPPID,
        30003 => ERR_SVR_FRIENDSHIP_ACCOUNT_NOT_FOUND,
        30004 => ERR_SVR_FRIENDSHIP_ADMIN_REQUIRED,
        30005 => ERR_SVR_FRIENDSHIP_SENSITIVE_TEXT,
        30006 => ERR_SVR_FRIENDSHIP_INTERNAL_ERROR,
        30007 => ERR_SVR_FRIENDSHIP_NET_TIMEOUT,
        30008 => ERR_SVR_FRIENDSHIP_WRITE_CONFLICT,
        30009 => ERR_SVR_FRIENDSHIP_ADD_FRIEND_DENY,
        30010 => ERR_SVR_FRIENDSHIP_COUNT_LIMIT,
        30011 => ERR_SVR_FRIENDSHIP_GROUP_COUNT_LIMIT,
        30012 => ERR_SVR_FRIENDSHIP_PENDENCY_LIMIT,
        30013 => ERR_SVR_FRIENDSHIP_BLACKLIST_LIMIT,
        30014 => ERR_SVR_FRIENDSHIP_PEER_FRIEND_LIMIT,
        30015 => ERR_SVR_FRIENDSHIP_ALREADY_FRIENDS,
        30515 => ERR_SVR_FRIENDSHIP_IN_SELF_BLACKLIST,
        30516 => ERR_SVR_FRIENDSHIP_ALLOW_TYPE_DENY_ANY,
        30525 => ERR_SVR_FRIENDSHIP_IN_PEER_BLACKLIST,
        30539 => ERR_SVR_FRIENDSHIP_ALLOW_TYPE_NEED_CONFIRM,
        30540 => ERR_SVR_FRIENDSHIP_ADD_FRIEND_SEC_RSTR,
        30614 => ERR_SVR_FRIENDSHIP_PENDENCY_NOT_FOUND,
        31704 => ERR_SVR_FRIENDSHIP_DEL_NONFRIEND,
        31707 => ERR_SVR_FRIENDSHIP_DEL_FRIEND_SEC_RSTR,
        31804 => ERR_SVR_FRIENDSHIP_ACCOUNT_NOT_FOUND_EX,
        32100 => ERR_SVR_FRIENDSHIP_SELF_FOLLOWING_COUNT_EXCEEDS_LIMIT,
        32101 => ERR_SVR_FRIENDSHIP_PEER_FOLLOWERS_COUNT_EXCEEDS_LIMIT,
        32102 => ERR_SVR_FRIENDSHIP_SELF_MUTUAL_FOLLOWERS_COUNT_EXCEEDS_LIMIT,
        32103 => ERR_SVR_FRIENDSHIP_PEER_MUTUAL_FOLLOWERS_COUNT_EXCEEDS_LIMIT,
        50001 => ERR_SVR_CONV_ACCOUNT_NOT_FOUND,
        50002 => ERR_SVR_CONV_INVALID_PARAMETERS,
        50003 => ERR_SVR_CONV_ADMIN_REQUIRED,
        50004 => ERR_SVR_CONV_INTERNAL_ERROR,
        50005 => ERR_SVR_CONV_NET_TIMEOUT,
        51006 => ERR_SVR_CONV_CONV_MARK_REQ_COUNT_EXCEED_LIMIT,
        51007 => ERR_SVR_CONV_CONV_MARK_OPERATE_FAILED,
        51008 => ERR_SVR_CONV_CONV_MARK_TOTAL_COUNT_EXCEED_LIMIT,
        51009 => ERR_SVR_CONV_CONV_GROUP_NOT_EXIST,
        51010 => ERR_SVR_CONV_CONV_GROUP_TOTAL_COUNT_EXCEED_LIMIT,
        51011 => ERR_SVR_CONV_CONV_GROUP_NAME_EXCEED_LENGTH,
        20001 => ERR_SVR_MSG_PKG_PARSE_FAILED,
        20002 => ERR_SVR_MSG_INTERNAL_AUTH_FAILED,
        20003 => ERR_SVR_MSG_INVALID_ID,
        20004 => ERR_SVR_MSG_NET_ERROR,
        20005 => ERR_SVR_MSG_INTERNAL_ERROR1,
        20006 => ERR_SVR_MSG_PUSH_DENY,
        20007 => ERR_SVR_MSG_IN_PEER_BLACKLIST,
        20009 => ERR_SVR_MSG_BOTH_NOT_FRIEND,
        20010 => ERR_SVR_MSG_NOT_PEER_FRIEND,
        20011 => ERR_SVR_MSG_NOT_SELF_FRIEND,
        20012 => ERR_SVR_MSG_SHUTUP_DENY,
        20016 => ERR_SVR_MSG_REVOKE_TIME_LIMIT,
        20018 => ERR_SVR_MSG_DEL_RAMBLE_INTERNAL_ERROR,
        23001 => ERR_SVR_MSG_EXTENSION_CONFLICT,
        23004 => ERR_SVR_MSG_EXTENSION_NOT_EXIST,
        23005 => ERR_SVR_MSG_REACTION_COUNT_LIMIT,
        23006 => ERR_SVR_MSG_REACTION_USER_COUNT_LIMIT,
        23007 => ERR_SVR_MSG_REACTION_ALREADY_CONTAIN_USER,
        23008 => ERR_SVR_MSG_REACTION_NOT_EXISTS,
        23009 => ERR_SVR_MSG_REACTION_NOT_CONTAIN_USER,
        90001 => ERR_SVR_MSG_JSON_PARSE_FAILED,
        90002 => ERR_SVR_MSG_INVALID_JSON_BODY_FORMAT,
        90003 => ERR_SVR_MSG_INVALID_TO_ACCOUNT,
        90005 => ERR_SVR_MSG_INVALID_RAND,
        90006 => ERR_SVR_MSG_INVALID_TIMESTAMP,
        90007 => ERR_SVR_MSG_BODY_NOT_ARRAY,
        90009 => ERR_SVR_MSG_ADMIN_REQUIRED,
        90010 => ERR_SVR_MSG_INVALID_JSON_FORMAT,
        90011 => ERR_SVR_MSG_TO_ACCOUNT_COUNT_LIMIT,
        90012 => ERR_SVR_MSG_TO_ACCOUNT_NOT_FOUND,
        90026 => ERR_SVR_MSG_TIME_LIMIT,
        90031 => ERR_SVR_MSG_INVALID_SYNCOTHERMACHINE,
        90044 => ERR_SVR_MSG_INVALID_MSGLIFETIME,
        90048 => ERR_SVR_MSG_ACCOUNT_NOT_FOUND,
        90994 => ERR_SVR_MSG_INTERNAL_ERROR2,
        90995 => ERR_SVR_MSG_INTERNAL_ERROR3,
        91000 => ERR_SVR_MSG_INTERNAL_ERROR4,
        90992 => ERR_SVR_MSG_INTERNAL_ERROR5,
        93000 => ERR_SVR_MSG_BODY_SIZE_LIMIT,
        91101 => ERR_SVR_MSG_LONGPOLLING_COUNT_LIMIT,
        10002 => ERR_SVR_GROUP_INTERNAL_ERROR,
        10003 => ERR_SVR_GROUP_API_NAME_ERROR,
        10004 => ERR_SVR_GROUP_INVALID_PARAMETERS,
        10005 => ERR_SVR_GROUP_ACOUNT_COUNT_LIMIT,
        10006 => ERR_SVR_GROUP_FREQ_LIMIT,
        10007 => ERR_SVR_GROUP_PERMISSION_DENY,
        10008 => ERR_SVR_GROUP_INVALID_REQ,
        10009 => ERR_SVR_GROUP_SUPER_NOT_ALLOW_QUIT,
        10010 => ERR_SVR_GROUP_NOT_FOUND,
        10011 => ERR_SVR_GROUP_JSON_PARSE_FAILED,
        10012 => ERR_SVR_GROUP_INVALID_ID,
        10013 => ERR_SVR_GROUP_ALLREADY_MEMBER,
        10014 => ERR_SVR_GROUP_FULL_MEMBER_COUNT,
        10015 => ERR_SVR_GROUP_INVALID_GROUPID,
        10016 => ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY,
        10017 => ERR_SVR_GROUP_SHUTUP_DENY,
        10018 => ERR_SVR_GROUP_RSP_SIZE_LIMIT,
        10019 => ERR_SVR_GROUP_ACCOUNT_NOT_FOUND,
        10021 => ERR_SVR_GROUP_GROUPID_IN_USED,
        10023 => ERR_SVR_GROUP_SEND_MSG_FREQ_LIMIT,
        10024 => ERR_SVR_GROUP_REQ_ALLREADY_BEEN_PROCESSED,
        10025 => ERR_SVR_GROUP_GROUPID_IN_USED_FOR_SUPER,
        10026 => ERR_SVR_GROUP_SDKAPPID_DENY,
        10030 => ERR_SVR_GROUP_REVOKE_MSG_NOT_FOUND,
        10031 => ERR_SVR_GROUP_REVOKE_MSG_TIME_LIMIT,
        10032 => ERR_SVR_GROUP_REVOKE_MSG_DENY,
        10033 => ERR_SVR_GROUP_NOT_ALLOW_REVOKE_MSG,
        10034 => ERR_SVR_GROUP_REMOVE_MSG_DENY,
        10035 => ERR_SVR_GROUP_NOT_ALLOW_REMOVE_MSG,
        10036 => ERR_SVR_GROUP_AVCHATROOM_COUNT_LIMIT,
        10037 => ERR_SVR_GROUP_COUNT_LIMIT,
        10038 => ERR_SVR_GROUP_MEMBER_COUNT_LIMIT,
        10056 => ERR_SVR_GROUP_ATTRIBUTE_WRITE_CONFILCT,
        10070 => ERR_SVR_GROUP_PINNED_MESSAGE_COUNT_LIMIT,
        10071 => ERR_SVR_GROUP_MESSAGE_ALREADY_PINNED,
        6003 => ERR_NO_SUCC_RESULT,
        6011 => ERR_TO_USER_INVALID,
        6012 => ERR_REQUEST_TIME_OUT,
        6018 => ERR_INIT_CORE_FAIL,
        6020 => ERR_EXPIRED_SESSION_NODE,
        6023 => ERR_LOGGED_OUT_BEFORE_LOGIN_FINISHED,
        6024 => ERR_TLSSDK_NOT_INITIALIZED,
        6025 => ERR_TLSSDK_USER_NOT_FOUND,
        6100 => ERR_BIND_FAIL_UNKNOWN,
        6101 => ERR_BIND_FAIL_NO_SSOTICKET,
        6102 => ERR_BIND_FAIL_REPEATD_BIND,
        6103 => ERR_BIND_FAIL_TINYID_NULL,
        6104 => ERR_BIND_FAIL_GUID_NULL,
        6105 => ERR_BIND_FAIL_UNPACK_REGPACK_FAILED,
        6106 => ERR_BIND_FAIL_REG_TIMEOUT,
        6107 => ERR_BIND_FAIL_ISBINDING,
        6120 => ERR_PACKET_FAIL_UNKNOWN,
        6121 => ERR_PACKET_FAIL_REQ_NO_NET,
        6122 => ERR_PACKET_FAIL_RESP_NO_NET,
        6123 => ERR_PACKET_FAIL_REQ_NO_AUTH,
        6124 => ERR_PACKET_FAIL_SSO_ERR,
        6125 => ERR_PACKET_FAIL_REQ_TIMEOUT,
        6126 => ERR_PACKET_FAIL_RESP_TIMEOUT,
        6127 => ERR_PACKET_FAIL_REQ_ON_RESEND,
        6128 => ERR_PACKET_FAIL_RESP_NO_RESEND,
        6129 => ERR_PACKET_FAIL_FLOW_SAVE_FILTERED,
        6130 => ERR_PACKET_FAIL_REQ_OVER_LOAD,
        6131 => ERR_PACKET_FAIL_LOGIC_ERR,
        6150 => ERR_FRIENDSHIP_PROXY_NOT_SYNCED,
        6151 => ERR_FRIENDSHIP_PROXY_SYNCING,
        6152 => ERR_FRIENDSHIP_PROXY_SYNCED_FAIL,
        6153 => ERR_FRIENDSHIP_PROXY_LOCAL_CHECK_ERR,
        6160 => ERR_GROUP_INVALID_FIELD,
        6161 => ERR_GROUP_STORAGE_DISABLED,
        6162 => ERR_LOADGRPINFO_FAILED,
        6200 => ERR_REQ_NO_NET_ON_REQ,
        6201 => ERR_REQ_NO_NET_ON_RSP,
        6205 => ERR_SERIVCE_NOT_READY,
        6207 => ERR_LOGIN_AUTH_FAILED,
        6209 => ERR_NEVER_CONNECT_AFTER_LAUNCH,
        6210 => ERR_REQ_FAILED,
        6211 => ERR_REQ_INVALID_REQ,
        6212 => ERR_REQ_OVERLOADED,
        6213 => ERR_REQ_KICK_OFF,
        6214 => ERR_REQ_SERVICE_SUSPEND,
        6215 => ERR_REQ_INVALID_SIGN,
        6216 => ERR_REQ_INVALID_COOKIE,
        6217 => ERR_LOGIN_TLS_RSP_PARSE_FAILED,
        6218 => ERR_LOGIN_OPENMSG_TIMEOUT,
        6219 => ERR_LOGIN_OPENMSG_RSP_PARSE_FAILED,
        6220 => ERR_LOGIN_TLS_DECRYPT_FAILED,
        6221 => ERR_WIFI_NEED_AUTH,
        6222 => ERR_USER_CANCELED,
        6223 => ERR_REVOKE_TIME_LIMIT_EXCEED,
        6224 => ERR_LACK_UGC_EXT,
        6226 => ERR_AUTOLOGIN_NEED_USERSIG,
        6300 => ERR_QAL_NO_SHORT_CONN_AVAILABLE,
        80101 => ERR_REQ_CONTENT_ATTACK,
        70101 => ERR_LOGIN_SIG_EXPIRE,
        90101 => ERR_SDK_HAD_INITIALIZED,
        115000 => ERR_OPENBDH_BASE,
        6250 => ERR_REQUEST_NO_NET_ONREQ,
        6251 => ERR_REQUEST_NO_NET_ONRSP,
        6252 => ERR_REQUEST_FAILED,
        6253 => ERR_REQUEST_INVALID_REQ,
        6254 => ERR_REQUEST_OVERLOADED,
        6255 => ERR_REQUEST_KICK_OFF,
        6256 => ERR_REQUEST_SERVICE_SUSPEND,
        6257 => ERR_REQUEST_INVALID_SIGN,
        6258 => ERR_REQUEST_INVALID_COOKIE,
        _ => throw ArgumentError("Unknown value for TIMErrCode: $value"),
      };
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
typedef DartDart_Port = int;

/// 1.9 群消息已读成员列表过滤
enum TIMGroupMessageReadMembersFilter {
  /// 群消息已读成员列表
  TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ(0),

  /// 群消息未读成员列表
  TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD(1);

  final int value;
  const TIMGroupMessageReadMembersFilter(this.value);

  static TIMGroupMessageReadMembersFilter fromValue(int value) =>
      switch (value) {
        0 => TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ,
        1 => TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD,
        _ => throw ArgumentError(
            "Unknown value for TIMGroupMessageReadMembersFilter: $value"),
      };
}

/// 全局回调类型
enum GlobalCallbackType {
  NetworkStatus(0),
  KickedOffline(1),
  UserSigExpired(2),
  SelfInfoUpdated(3),
  UserStatusChanged(4),
  UserInfoChanged(5),
  LogCallback(6),
  ReceiveNewMessage(7),
  MessageElemUploadProgress(8),
  MessageReadReceipt(9),
  MessageRevoke(10),
  MessageUpdate(11),
  MessageExtensionsChanged(12),
  MessageExtensionsDeleted(13),
  MessageReactionChange(14),
  AllMessageReceiveOption(15),
  GroupPinnedMessageChanged(16),
  GroupTipsEvent(17),
  GroupAttributeChanged(18),
  GroupCounterChanged(19),
  TopicCreated(20),
  TopicDeleted(21),
  TopicChanged(22),
  ReceiveTopicRESTCustomData(23),
  CreatePermissionGroup(24),
  DeletePermissionGroup(25),
  ChangePermissionGroupInfo(26),
  AddMembersToPermissionGroup(27),
  RemoveMembersFromPermissionGroup(28),
  AddTopicPermission(29),
  DeleteTopicPermission(30),
  ModifyTopicPermission(31),
  ConversationEvent(32),
  TotalUnreadMessageCountChanged(33),
  TotalUnreadMessageCountChangedByFilter(34),
  ConversationGroupCreated(35),
  ConversationGroupDeleted(36),
  ConversationGroupNameChanged(37),
  ConversationsAddedToGroup(38),
  ConversationsDeletedFromGroup(39),
  AddFriend(40),
  DeleteFriend(41),
  UpdateFriendProfile(42),
  FriendAddRequest(43),
  FriendApplicationListDeleted(44),
  FriendApplicationListRead(45),
  FriendBlackListAdded(46),
  FriendBlackListDeleted(47),
  FriendGroupCreated(48),
  FriendGroupDeleted(49),
  FriendGroupNameChanged(50),
  FriendsAddedToGroup(51),
  FriendsDeletedFromGroup(52),
  OfficialAccountSubscribed(53),
  OfficialAccountUnsubscribed(54),
  OfficialAccountDeleted(55),
  OfficialAccountInfoChanged(56),
  MyFollowingListChanged(57),
  MyFollowersListChanged(58),
  MutualFollowersListChanged(59),
  SignalingReceiveNewInvitation(60),
  SignalingInvitationCancelled(61),
  SignalingInviteeAccepted(62),
  SignalingInviteeRejected(63),
  SignalingInvitationTimeout(64),
  SignalingInvitationModified(65);

  final int value;
  const GlobalCallbackType(this.value);

  static GlobalCallbackType fromValue(int value) => switch (value) {
        0 => NetworkStatus,
        1 => KickedOffline,
        2 => UserSigExpired,
        3 => SelfInfoUpdated,
        4 => UserStatusChanged,
        5 => UserInfoChanged,
        6 => LogCallback,
        7 => ReceiveNewMessage,
        8 => MessageElemUploadProgress,
        9 => MessageReadReceipt,
        10 => MessageRevoke,
        11 => MessageUpdate,
        12 => MessageExtensionsChanged,
        13 => MessageExtensionsDeleted,
        14 => MessageReactionChange,
        15 => AllMessageReceiveOption,
        16 => GroupPinnedMessageChanged,
        17 => GroupTipsEvent,
        18 => GroupAttributeChanged,
        19 => GroupCounterChanged,
        20 => TopicCreated,
        21 => TopicDeleted,
        22 => TopicChanged,
        23 => ReceiveTopicRESTCustomData,
        24 => CreatePermissionGroup,
        25 => DeletePermissionGroup,
        26 => ChangePermissionGroupInfo,
        27 => AddMembersToPermissionGroup,
        28 => RemoveMembersFromPermissionGroup,
        29 => AddTopicPermission,
        30 => DeleteTopicPermission,
        31 => ModifyTopicPermission,
        32 => ConversationEvent,
        33 => TotalUnreadMessageCountChanged,
        34 => TotalUnreadMessageCountChangedByFilter,
        35 => ConversationGroupCreated,
        36 => ConversationGroupDeleted,
        37 => ConversationGroupNameChanged,
        38 => ConversationsAddedToGroup,
        39 => ConversationsDeletedFromGroup,
        40 => AddFriend,
        41 => DeleteFriend,
        42 => UpdateFriendProfile,
        43 => FriendAddRequest,
        44 => FriendApplicationListDeleted,
        45 => FriendApplicationListRead,
        46 => FriendBlackListAdded,
        47 => FriendBlackListDeleted,
        48 => FriendGroupCreated,
        49 => FriendGroupDeleted,
        50 => FriendGroupNameChanged,
        51 => FriendsAddedToGroup,
        52 => FriendsDeletedFromGroup,
        53 => OfficialAccountSubscribed,
        54 => OfficialAccountUnsubscribed,
        55 => OfficialAccountDeleted,
        56 => OfficialAccountInfoChanged,
        57 => MyFollowingListChanged,
        58 => MyFollowersListChanged,
        59 => MutualFollowersListChanged,
        60 => SignalingReceiveNewInvitation,
        61 => SignalingInvitationCancelled,
        62 => SignalingInviteeAccepted,
        63 => SignalingInviteeRejected,
        64 => SignalingInvitationTimeout,
        65 => SignalingInvitationModified,
        _ =>
          throw ArgumentError("Unknown value for GlobalCallbackType: $value"),
      };
}
